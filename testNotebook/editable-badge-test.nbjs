{
  "cells": [
    {
      "id": "md_intro",
      "type": "markdown",
      "content": "# PropertyGrid Editable Badge Test\n\nThis notebook tests that the \"Editable\" badge only appears when objects are truly reactive and editable."
    },
    {
      "id": "code_reactive",
      "type": "code",
      "code": "// Create a truly reactive object (exported)\nexports.reactiveConfig = {\n  name: \"Reactive Object\",\n  value: 42,\n  nested: {\n    prop: \"editable\"\n  }\n};\n\noutput(exports.reactiveConfig);"
    },
    {
      "id": "md_expected1",
      "type": "markdown",
      "content": "‚òùÔ∏è **Expected**: The PropertyGrid above should show the \"Editable\" badge because it's a reactive variable (`exports.reactiveConfig`)."
    },
    {
      "id": "code_nonreactive",
      "type": "code",
      "code": "// Create a non-reactive object (not exported)\nconst nonReactiveConfig = {\n  name: \"Non-Reactive Object\",\n  value: 99,\n  nested: {\n    prop: \"not editable\"\n  }\n};\n\noutput(nonReactiveConfig);"
    },
    {
      "id": "md_expected2",
      "type": "markdown",
      "content": "‚òùÔ∏è **Expected**: The PropertyGrid above should NOT show the \"Editable\" badge because it's not a reactive variable (not exported)."
    },
    {
      "id": "code_copy",
      "type": "code",
      "code": "// Create a copy of the reactive object\nconst copyOfReactive = { ...reactiveConfig };\n\noutput(copyOfReactive);"
    },
    {
      "id": "md_expected3",
      "type": "markdown",
      "content": "‚òùÔ∏è **Expected**: The PropertyGrid above should NOT show the \"Editable\" badge because it's a copy, not the original reactive object."
    },
    {
      "id": "code_test_editing",
      "type": "code",
      "code": "// Test that only the reactive object can actually be edited\nconsole.log('Before any editing:');\nconsole.log('reactiveConfig.value:', reactiveConfig.value);\nconsole.log('nonReactiveConfig.value:', nonReactiveConfig.value);\nconsole.log('copyOfReactive.value:', copyOfReactive.value);\n\noutput({\n  'Reactive Value': reactiveConfig.value,\n  'Non-Reactive Value': nonReactiveConfig.value,\n  'Copy Value': copyOfReactive.value\n});"
    },
    {
      "id": "md_instructions",
      "type": "markdown",
      "content": "## Test Instructions\n\n1. **Check the \"Editable\" badges**: \n   - First PropertyGrid (reactiveConfig) should have \"Editable\" badge\n   - Second PropertyGrid (nonReactiveConfig) should NOT have \"Editable\" badge\n   - Third PropertyGrid (copyOfReactive) should NOT have \"Editable\" badge\n\n2. **Try editing values**:\n   - Edit `reactiveConfig.value` from 42 to something else (should work)\n   - Try clicking on `nonReactiveConfig.value` (should NOT be editable - no pencil icon, no click response)\n   - Try clicking on `copyOfReactive.value` (should NOT be editable - no pencil icon, no click response)\n\n3. **Run the verification cell** below to see if changes propagated\n\n## Expected Behavior\n\n- ‚úÖ Only reactive objects (exports.variableName) should show \"Editable\" badge\n- ‚úÖ Only reactive objects should actually be editable (show pencil icon, respond to clicks)\n- ‚ùå Non-reactive objects should be read-only (no pencil icon, no click response)\n- ‚ùå Copies should be read-only (no pencil icon, no click response)\n- ‚úÖ Badge correctly reflects actual editability"
    },
    {
      "id": "code_verify",
      "type": "code",
      "code": "// Verify which objects actually changed\nconsole.log('After editing attempts:');\nconsole.log('reactiveConfig.value:', reactiveConfig.value);\nconsole.log('nonReactiveConfig.value:', nonReactiveConfig.value);\nconsole.log('copyOfReactive.value:', copyOfReactive.value);\n\noutput({\n  'Reactive Value (should change)': reactiveConfig.value,\n  'Non-Reactive Value (should stay 99)': nonReactiveConfig.value,\n  'Copy Value (should stay 42)': copyOfReactive.value,\n  'All objects same?': reactiveConfig.value === nonReactiveConfig.value && reactiveConfig.value === copyOfReactive.value\n});"
    },
    {
      "id": "md_conclusion",
      "type": "markdown",
      "content": "## Expected Results\n\n- üü¢ **reactiveConfig**: Shows \"Editable\" badge, pencil icons appear on hover, values can be edited, changes persist\n- üî¥ **nonReactiveConfig**: No \"Editable\" badge, no pencil icons, clicking does nothing (read-only)\n- üî¥ **copyOfReactive**: No \"Editable\" badge, no pencil icons, clicking does nothing (read-only)\n\nThis ensures the \"Editable\" badge accurately reflects whether an object is truly reactive and editable, and prevents editing of non-reactive objects."
    }
  ]
}

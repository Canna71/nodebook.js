{
  "cells": [
    {
      "id": "md_intro",
      "type": "markdown",
      "content": "# PropertyGrid Comprehensive Test\n\nThis notebook provides a comprehensive test of the PropertyGrid component with the improved design."
    },
    {
      "id": "code_simple",
      "type": "code",
      "code": "// Simple test object\nexports.simple = {\n  name: \"Test Object\",\n  count: 42,\n  active: true,\n  price: 29.99\n};\n\noutput(simple);"
    },
    {
      "id": "md_instructions",
      "type": "markdown",
      "content": "## Test Instructions\n\n**Editing Test**: Try editing the values above:\n- Change the name from \"Test Object\" to something else\n- Modify the count to a different number\n- Toggle the active boolean\n- Change the price\n\nNotice the improved design:\n- ✅ Property names are shown only once (not duplicated)\n- ✅ No type badges cluttering the interface\n- ✅ Different background colors for property vs value columns\n- ✅ Clean two-column layout\n\nThen run the verification cell below:"
    },
    {
      "id": "code_verify",
      "type": "code",
      "code": "// Verify that editing worked\nconsole.log('Current simple object:', simple);\noutput({\n  'Edited Name': simple.name,\n  'Edited Count': simple.count,\n  'Edited Active': simple.active,\n  'Edited Price': simple.price\n});"
    },
    {
      "id": "md_nested",
      "type": "markdown",
      "content": "## Nested Object Test\n\nTest editing nested properties:"
    },
    {
      "id": "code_nested",
      "type": "code",
      "code": "// Nested object for testing\nexports.config = {\n  app: {\n    name: \"My Application\",\n    version: \"1.0.0\",\n    debug: false\n  },\n  server: {\n    host: \"localhost\",\n    port: 3000,\n    ssl: false\n  },\n  database: {\n    host: \"db.example.com\",\n    port: 5432,\n    name: \"myapp\",\n    ssl: true\n  }\n};\n\noutput(config);"
    },
    {
      "id": "md_nested_test",
      "type": "markdown",
      "content": "**Nested Editing Test**: Try editing nested properties:\n- Change `app.name` to \"My Cool App\"\n- Set `app.debug` to `true`\n- Change `server.port` to `8080`\n- Toggle `database.ssl` to `false`\n\nThe path display should help you identify which property you're editing."
    },
    {
      "id": "code_verify_nested",
      "type": "code",
      "code": "// Verify nested editing worked\nconsole.log('Current config:', JSON.stringify(config, null, 2));\noutput({\n  'App Name': config.app.name,\n  'Debug Mode': config.app.debug,\n  'Server Port': config.server.port,\n  'Database SSL': config.database.ssl\n});"
    },
    {
      "id": "md_reactive",
      "type": "markdown",
      "content": "## Reactive Updates Test\n\nThis tests that changes trigger reactive updates:"
    },
    {
      "id": "code_reactive",
      "type": "code",
      "code": "// Create computed values that depend on config\nconst serverUrl = `http${config.server.ssl ? 's' : ''}://${config.server.host}:${config.server.port}`;\nconst appTitle = `${config.app.name} v${config.app.version}`;\nconst mode = config.app.debug ? 'Development' : 'Production';\n\nexports.computed = {\n  serverUrl,\n  appTitle,\n  mode,\n  timestamp: new Date().toISOString()\n};\n\noutput(computed);"
    },
    {
      "id": "md_final",
      "type": "markdown",
      "content": "## Final Test\n\n1. **Edit the config object** above (change ports, toggle SSL, modify app name)\n2. **Re-run the reactive cell** - the computed values should update automatically\n3. **Verify the PropertyGrid design**:\n   - Clean property/value columns with different backgrounds\n   - Property names shown once without duplication\n   - No type badges cluttering the interface\n   - Easy-to-use edit functionality\n\n## Expected Results\n\n- ✅ **PropertyGrid shows for exported variables** (`exports.simple`, `exports.config`)\n- ✅ **Editing works** - click edit icon, modify value, press Enter\n- ✅ **Type conversion** - numbers stay numbers, booleans stay booleans\n- ✅ **Reactive updates** - changes trigger re-execution of dependent cells\n- ✅ **Clean design** - improved visual layout without redundant information"
    }
  ]
}

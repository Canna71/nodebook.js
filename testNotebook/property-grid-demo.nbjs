{
  "cells": [
    {
      "id": "md_01",
      "type": "markdown",
      "content": "# PropertyGrid Demo\n\nThis notebook demonstrates the new PropertyGrid component for viewing and editing object properties."
    },
    {
      "id": "code_01",
      "type": "code",
      "code": "// Create a sample object with various data types\nexports.sampleData = {\n  name: \"John Doe\",\n  age: 30,\n  isActive: true,\n  salary: 75000.50,\n  address: {\n    street: \"123 Main St\",\n    city: \"Anytown\",\n    zipCode: \"12345\"\n  },\n  hobbies: [\"reading\", \"swimming\", \"coding\"],\n  metadata: {\n    createdAt: \"2023-01-01\",\n    updatedAt: \"2025-06-29\",\n    version: 1.2\n  }\n};\n\noutput(exports.sampleData);"
    },
    {
      "id": "md_02",
      "type": "markdown",
      "content": "## Editable Reactive Object\n\nSince `sampleData` is exported and part of the reactive system, you can edit its properties directly in the PropertyGrid above."
    },
    {
      "id": "code_02",
      "type": "code",
      "code": "// Create another object to demonstrate editing\nexports.userSettings = {\n  theme: \"dark\",\n  fontSize: 14,\n  notifications: {\n    email: true,\n    push: false,\n    sms: true\n  },\n  preferences: {\n    language: \"en\",\n    timezone: \"UTC\",\n    autoSave: true\n  }\n};\n\noutput(exports.userSettings);"
    },
    {
      "id": "md_03",
      "type": "markdown",
      "content": "## Reading Updated Values\n\nTry editing the properties above and then run this cell to see the updated values:"
    },
    {
      "id": "code_03",
      "type": "code",
      "code": "// Display current values to verify editing works\nconsole.log('Current sampleData:', JSON.stringify(sampleData, null, 2));\nconsole.log('Current userSettings:', JSON.stringify(userSettings, null, 2));\n\n// Show just a few key values\noutput({\n  userName: sampleData.name,\n  userAge: sampleData.age,\n  userCity: sampleData.address.city,\n  currentTheme: userSettings.theme,\n  fontSize: userSettings.fontSize,\n  emailNotifications: userSettings.notifications.email\n});"
    },
    {
      "id": "md_04",
      "type": "markdown",
      "content": "## Comparison with Legacy JSON View\n\nFor comparison, here's the same data rendered with the legacy ReactJson component:"
    },
    {
      "id": "code_04",
      "type": "code",
      "code": "// Non-reactive object (not exported, so not editable)\nconst readOnlyData = {\n  status: \"read-only\",\n  description: \"This object is not editable because it's not a reactive variable\",\n  data: {\n    items: [1, 2, 3, 4, 5],\n    config: {\n      enabled: true,\n      level: \"info\"\n    }\n  }\n};\n\n// This will show the PropertyGrid in read-only mode\noutput(readOnlyData);"
    },
    {
      "id": "md_05",
      "type": "markdown",
      "content": "## Features of the PropertyGrid\n\n### Advantages over ReactJson:\n- **Clean two-column layout**: Property names on the left, values on the right\n- **Type information**: Each property shows its data type\n- **Editable reactive values**: Can edit properties of exported variables\n- **Better visual hierarchy**: Nested properties are flattened with full path display\n- **Consistent with DataFrame editor**: Uses the same editing patterns\n\n### Editing Features:\n- Click the edit icon next to any editable value\n- Press Enter to save, Escape to cancel\n- Supports strings, numbers, booleans, null/undefined\n- Type-aware parsing (automatically converts \"42\" to number 42)\n- Real-time updates to the reactive system"
    }
  ]
}

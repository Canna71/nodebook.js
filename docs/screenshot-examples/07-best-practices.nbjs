{
  "cells": [
    {
      "type": "markdown",
      "id": "header",
      "content": "# Best Practices Notebook\n\nThis notebook demonstrates best practices for organizing and structuring Nodebook.js notebooks."
    },
    {
      "type": "markdown",
      "id": "imports-section",
      "content": "## 📦 Imports & Setup\n\nStart with a clear imports and configuration section."
    },
    {
      "type": "code",
      "id": "imports",
      "code": "// ✅ Good: Clear imports and configuration at the top\nconst CONFIG = {\n  apiEndpoint: 'https://api.example.com',\n  defaultTimeout: 5000,\n  debugMode: false\n};\n\n// ✅ Good: Descriptive variable names\nconst SALES_TAX_RATE = 0.08;\nconst SHIPPING_COST_STANDARD = 10;\nconst SHIPPING_COST_PRIORITY = 25;\n\n// Export configuration for other cells\nexports.CONFIG = CONFIG;\nexports.SALES_TAX_RATE = SALES_TAX_RATE;\nexports.SHIPPING_COST_STANDARD = SHIPPING_COST_STANDARD;\nexports.SHIPPING_COST_PRIORITY = SHIPPING_COST_PRIORITY;\n\noutput(\"✅ Configuration loaded\");"
    },
    {
      "type": "markdown",
      "id": "data-section",
      "content": "## 📊 Data Loading & Validation\n\nGroup related functionality and add clear documentation."
    },
    {
      "type": "code",
      "id": "data-loading",
      "code": "// ✅ Good: Well-commented data loading with validation\n/**\n * Load and validate sample sales data\n * @returns {Array} Validated sales records\n */\nfunction loadSalesData() {\n  const rawData = [\n    { id: 1, product: 'Laptop Pro', price: 1299, quantity: 5, date: '2024-01-15' },\n    { id: 2, product: 'Wireless Mouse', price: 45, quantity: 12, date: '2024-01-16' },\n    { id: 3, product: 'USB-C Hub', price: 89, quantity: 8, date: '2024-01-17' }\n  ];\n  \n  // ✅ Good: Data validation\n  const validatedData = rawData.filter(record => {\n    return record.price > 0 && record.quantity > 0 && record.product.length > 0;\n  });\n  \n  console.log(`Loaded ${validatedData.length} valid records`);\n  return validatedData;\n}\n\nconst salesRecords = loadSalesData();\nexports.salesRecords = salesRecords;\n\n// ✅ Good: Clear output showing what was accomplished\noutput(`✅ Loaded ${salesRecords.length} sales records`);\noutput.table(salesRecords);"
    },
    {
      "type": "markdown",
      "id": "processing-section",
      "content": "## ⚙️ Data Processing\n\nBreak complex operations into well-named functions with clear purposes."
    },
    {
      "type": "code",
      "id": "data-processing",
      "code": "// ✅ Good: Pure functions with clear names and purposes\n/**\n * Calculate total revenue for a sales record\n */\nfunction calculateRecordRevenue(record) {\n  const subtotal = record.price * record.quantity;\n  const taxAmount = subtotal * SALES_TAX_RATE;\n  return subtotal + taxAmount;\n}\n\n/**\n * Generate summary statistics for sales data\n */\nfunction generateSalesSummary(records) {\n  const totalRevenue = records.reduce((sum, record) => {\n    return sum + calculateRecordRevenue(record);\n  }, 0);\n  \n  const totalUnits = records.reduce((sum, record) => sum + record.quantity, 0);\n  const averageOrderValue = totalRevenue / records.length;\n  \n  return {\n    totalRecords: records.length,\n    totalRevenue: Math.round(totalRevenue * 100) / 100,\n    totalUnits,\n    averageOrderValue: Math.round(averageOrderValue * 100) / 100,\n    topProduct: records.reduce((top, record) => \n      calculateRecordRevenue(record) > calculateRecordRevenue(top) ? record : top\n    ).product\n  };\n}\n\n// ✅ Good: Use the reactive system effectively\nconst salesSummary = generateSalesSummary(salesRecords);\nexports.salesSummary = salesSummary;\n\noutput(\"📊 **Sales Summary Generated:**\");\noutput(salesSummary);"
    },
    {
      "type": "markdown",
      "id": "results-section",
      "content": "## 📈 Results & Visualization\n\nPresent results clearly with appropriate visualizations.\n\n### Key Findings\n\n- **Total Revenue**: ${{salesSummary.totalRevenue.toLocaleString()}}\n- **Units Sold**: {{salesSummary.totalUnits}} items\n- **Average Order**: ${{salesSummary.averageOrderValue}}\n- **Top Product**: {{salesSummary.topProduct}}\n\n### Performance Metrics\n\nOur analysis shows strong performance with an average order value of **${{salesSummary.averageOrderValue}}** across {{salesSummary.totalRecords}} orders."
    },
    {
      "type": "code",
      "id": "visualization",
      "code": "// ✅ Good: Create meaningful visualizations\nconst chartData = {\n  x: salesRecords.map(r => r.product),\n  y: salesRecords.map(r => calculateRecordRevenue(r)),\n  type: 'bar',\n  marker: {\n    color: '#3b82f6',\n    line: { color: '#1e40af', width: 1 }\n  }\n};\n\nconst layout = {\n  title: 'Revenue by Product',\n  xaxis: { title: 'Product' },\n  yaxis: { title: 'Revenue ($)', tickformat: '$,.0f' },\n  height: 400,\n  margin: { t: 50, b: 100 }\n};\n\nconst chartDiv = createDiv({ style: 'height: 400px;' });\noutput(chartDiv);\nPlotly.newPlot(chartDiv, [chartData], layout);\n\noutput(\"✅ Visualization complete!\");"
    },
    {
      "type": "markdown",
      "id": "footer-section",
      "content": "## 🎯 Summary\n\nThis notebook demonstrates several best practices:\n\n1. **Clear structure** with markdown sections\n2. **Descriptive variable names** (SALES_TAX_RATE vs tax)\n3. **Well-commented functions** with JSDoc\n4. **Data validation** before processing\n5. **Reactive exports** for downstream cells\n6. **Meaningful outputs** showing progress\n7. **Professional visualizations** with proper labels\n8. **Dynamic markdown** with interpolated values\n\n---\n\n*Generated on {{new Date().toLocaleDateString()}} | Total Revenue: ${{salesSummary.totalRevenue.toLocaleString()}}*"
    }
  ]
}

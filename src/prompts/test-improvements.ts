/**
 * Test for AI Service improvements
 * This file demonstrates the new JSON-based AI service functionality with bundled prompts
 */

import { AIService } from '../Engine/AIService';
import { PromptLoader } from '../Engine/PromptLoader';
import { prompts } from './index';

// Mock test data
const mockNotebookJSON = {
  "cells": [
    {
      "type": "markdown",
      "id": "intro-md",
      "content": "# Test Notebook\n\nThis is a test notebook generated by the AI service."
    },
    {
      "type": "input",
      "id": "value-input",
      "label": "Test Value",
      "inputType": "number",
      "variableName": "testValue",
      "value": 42,
      "props": {
        "min": 0,
        "max": 100,
        "step": 1
      }
    },
    {
      "type": "formula",
      "id": "calculation-formula",
      "variableName": "doubled",
      "formula": "$testValue * 2"
    },
    {
      "type": "code",
      "id": "output-code",
      "code": "// Display the results\nconst container = createContainer();\nconst result = createKeyValueGrid({\n  'Input Value': testValue,\n  'Doubled Value': doubled,\n  'Calculation': `${testValue} × 2 = ${doubled}`\n});\n\noutput(container, result);\n\n// Export for other cells\nexports.summary = {\n  input: testValue,\n  output: doubled,\n  timestamp: new Date().toISOString()\n};"
    }
  ],
  "metadata": {
    "title": "AI Service Test Notebook",
    "description": "Testing the improved AI service with JSON output",
    "tags": ["test", "ai", "json"],
    "version": "1.0"
  }
};

/**
 * Test the prompt loader functionality with bundled prompts
 */
export function testPromptLoader() {
  console.log('Testing PromptLoader with bundled prompts...');
  
  try {
    // Test loading notebook generation prompt
    const notebookPrompt = PromptLoader.loadNotebookGenerationPrompt();
    console.log('✓ Notebook generation prompt loaded:', notebookPrompt.substring(0, 100) + '...');
    
    // Test loading code cell generation prompt
    const codeCellPrompt = PromptLoader.loadCodeCellGenerationPrompt();
    console.log('✓ Code cell generation prompt loaded:', codeCellPrompt.substring(0, 100) + '...');
    
    // Test cache functionality
    const cacheStats = PromptLoader.getCacheStats();
    console.log('✓ Cache stats:', cacheStats);
    
    // Test direct import access
    console.log('✓ Direct prompt access available:', {
      notebookLength: prompts.notebookGeneration.length,
      codeCellLength: prompts.codeCellGeneration.length
    });
    
    return true;
  } catch (error) {
    console.error('✗ PromptLoader test failed:', error);
    return false;
  }
}

/**
 * Test the AI service JSON parsing
 */
export function testJSONParsing() {
  console.log('Testing JSON parsing...');
  
  try {
    // This would test the parsing logic if we had access to the private method
    // For now, we'll just validate the structure
    const jsonString = JSON.stringify(mockNotebookJSON, null, 2);
    const parsed = JSON.parse(jsonString);
    
    // Validate structure
    if (!Array.isArray(parsed.cells)) {
      throw new Error('Cells is not an array');
    }
    
    if (parsed.cells.length !== 4) {
      throw new Error(`Expected 4 cells, got ${parsed.cells.length}`);
    }
    
    // Validate cell types
    const expectedTypes = ['markdown', 'input', 'formula', 'code'];
    parsed.cells.forEach((cell: any, index: number) => {
      if (cell.type !== expectedTypes[index]) {
        throw new Error(`Cell ${index} has type ${cell.type}, expected ${expectedTypes[index]}`);
      }
    });
    
    console.log('✓ JSON structure validation passed');
    return true;
  } catch (error) {
    console.error('✗ JSON parsing test failed:', error);
    return false;
  }
}

/**
 * Run all tests
 */
export function runAIServiceTests() {
  console.log('Running AI Service improvement tests...\n');
  
  const results = {
    promptLoader: testPromptLoader(),
    jsonParsing: testJSONParsing()
  };
  
  console.log('\nTest Results:');
  console.log('=============');
  Object.entries(results).forEach(([test, passed]) => {
    console.log(`${test}: ${passed ? '✓ PASS' : '✗ FAIL'}`);
  });
  
  const allPassed = Object.values(results).every(result => result);
  console.log(`\nOverall: ${allPassed ? '✓ ALL TESTS PASSED' : '✗ SOME TESTS FAILED'}`);
  
  return allPassed;
}

// Export the mock data for use in other tests
export { mockNotebookJSON };

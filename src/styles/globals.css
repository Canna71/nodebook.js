@import "tailwindcss";

@custom-variant dark (&:where(.dark, .dark *));

@import "./theme.css";

/* Tailwind base layer for dark mode */
@layer base {
    html {
        color-scheme: dark;

        
        font-family: Roboto, "Segoe UI", Helvetica, Arial, sans-serif;
    }

    
}


@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
  button:not([disabled]),
  [role="button"]:not([disabled]) {
    cursor: pointer;
  }
}

@layer utilities {
  .input-max-width {
    @apply max-w-48;
  }
  
  /* Cell container visibility controls */
  .cell-container {
    @apply transition-all duration-200 relative;
  }
  
  /* Hide cell controls by default - opacity only, no layout changes */
  .cell-container .cell-controls {
    @apply opacity-0 transition-opacity duration-200;
  }
  
  /* Show cell controls on hover, selected, or edit mode */
  .cell-container:hover .cell-controls,
  .cell-container.selected .cell-controls,
  .cell-container.edit-mode .cell-controls {
    @apply opacity-100;
  }
  
  /* Hide cell type indicator by default - opacity only, no layout changes */
  .cell-container .cell-type-indicator {
    @apply opacity-0 transition-opacity duration-200;
  }
  
  /* Show cell type indicator on hover, selected, or edit mode */
  .cell-container:hover .cell-type-indicator,
  .cell-container.selected .cell-type-indicator,
  .cell-container.edit-mode .cell-type-indicator {
    @apply opacity-100;
  }
  
  /* Hide cell grip indicator by default - opacity only, no layout changes */
  .cell-container .cell-grip-indicator {
    @apply opacity-0 transition-opacity duration-200;
  }
  
  /* Show cell grip indicator on hover, selected, or edit mode */
  .cell-container:hover .cell-grip-indicator,
  .cell-container.selected .cell-grip-indicator,
  .cell-container.edit-mode .cell-grip-indicator {
    @apply opacity-100;
  }
  
  /* Ensure cell content takes remaining space */
  .cell-container .cell-content {
    @apply flex-1;
  }
  
  /* Cell container state styling */
  .cell-container {
    @apply border-transparent;
  }
  
  .cell-container:hover,
  .cell-container.selected,
  .cell-container.edit-mode {
    @apply border-border;
  }
  
  /* Ensure selected cells have proper visual feedback */
  .cell-container.selected {
    @apply border-accent shadow-lg bg-accent/10;
  }
  
  /* Cell separator styles */
  .cell-separator {
    @apply relative cursor-pointer;
  }
  
  .cell-separator:hover {
    @apply z-10;
  }
  
  /* Ensure separator buttons appear above other content */
  .cell-separator .absolute {
    @apply z-20;
  }
  
  /* Ensure overlay controls appear above cell content */
  .cell-container .cell-controls {
    @apply z-10;
  }
  
  /* React JSON View specific styles */
  .json-view-container {
    @apply relative z-20;
    pointer-events: all;
  }
  
  /* Ensure react-json-view elements are clickable */
  .json-view-container .react-json-view {
    pointer-events: all !important;
  }
  
  /* Style the expand/collapse icons specifically */
  .json-view-container .icon-container {
    pointer-events: all !important;
    cursor: pointer !important;
    z-index: 100 !important;
    position: relative !important;
  }
  
  /* Ensure the triangle icons are clickable */
  .json-view-container .collapsed-icon,
  .json-view-container .expanded-icon {
    pointer-events: all !important;
    cursor: pointer !important;
  }
  
  /* Make sure object keys and brackets are clickable for collapse/expand */
  .json-view-container .object-key-val,
  .json-view-container .array-key-val {
    pointer-events: all !important;
  }
}

/* @utility border-err {
  @apply border-1 border-error;
} */

/* Utility classes for dark mode */
.dark .plot-container { 
	 filter: invert(100%) hue-rotate(180deg); 
 }

.dark .plot-container g.cartesianlayer  g.gridlayer path {
    stroke: var(--color-muted-foreground) !important;
}
@import "tailwindcss";
@plugin "@tailwindcss/typography";

@custom-variant dark (&:where(.dark, .dark *));

@import "./theme.css";

/* Tailwind base layer for dark mode */
@layer base {
    html {
        color-scheme: dark;

        
        font-family: Roboto, "Segoe UI", Helvetica, Arial, sans-serif;
    }

    
}


@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
  button:not([disabled]),
  [role="button"]:not([disabled]) {
    cursor: pointer;
  }
}

@layer utilities {
  .input-max-width {
    @apply max-w-48;
  }
  
  /* Cell container visibility controls */
  .cell-container {
    @apply transition-all duration-200 relative;
  }
  
  /* Hide cell controls by default - opacity only, no layout changes */
  .cell-container .cell-controls {
    @apply opacity-0 transition-opacity duration-200;
  }
  
  /* Show cell controls on hover, selected, or edit mode */
  .cell-container:hover .cell-controls,
  .cell-container.selected .cell-controls,
  .cell-container.edit-mode .cell-controls {
    @apply opacity-100;
  }
  
  /* Hide cell type indicator by default - opacity only, no layout changes */
  .cell-container .cell-type-indicator {
    @apply opacity-0 transition-opacity duration-200;
  }
  
  /* Show cell type indicator on hover, selected, or edit mode */
  .cell-container:hover .cell-type-indicator,
  .cell-container.selected .cell-type-indicator,
  .cell-container.edit-mode .cell-type-indicator {
    @apply opacity-100;
  }
  
  /* Hide cell grip indicator by default - opacity only, no layout changes */
  .cell-container .cell-grip-indicator {
    @apply opacity-0 transition-opacity duration-200;
  }
  
  /* Show cell grip indicator on hover, selected, or edit mode */
  .cell-container:hover .cell-grip-indicator,
  .cell-container.selected .cell-grip-indicator,
  .cell-container.edit-mode .cell-grip-indicator {
    @apply opacity-100;
  }
  
  /* Ensure cell content takes remaining space but doesn't overflow */
  .cell-container .cell-content {
    @apply flex-1 min-w-0 overflow-hidden;
  }
  
  /* Force all editors to respect container width */
  .cell-container .cell-content .cm-editor {
    width: 100% !important;
    max-width: 100% !important;
    box-sizing: border-box !important;
  }
  
  .cell-container .cell-content .cm-scroller {
    width: 100% !important;
    max-width: 100% !important;
    box-sizing: border-box !important;
    overflow: auto !important;
    /* Ensure scroll events are captured by the editor */
    overscroll-behavior: contain;
  }
  
  .cell-container .cell-content .cm-content {
    width: 100% !important;
    max-width: 100% !important;
    box-sizing: border-box !important;
  }
  
  /* Specific handling for auto-height editors with scroll */
  .cell-container .cell-content .cm-editor[style*="auto"] .cm-scroller {
    /* overflowY: auto !important; */
    overscroll-behavior-y: contain !important;
  }
  
  /* Cell container state styling */
  .cell-container {
    @apply border-transparent;
  }
  
  .cell-container:hover,
  .cell-container.selected,
  .cell-container.edit-mode {
    @apply border-border;
  }
  
  /* Ensure selected cells have proper visual feedback */
  .cell-container.selected {
    @apply border-accent shadow-lg bg-accent/10;
  }
  
  /* Cell separator styles */
  .cell-separator {
    @apply relative cursor-pointer;
  }
  
  .cell-separator:hover {
    @apply z-10;
  }
  
  /* Ensure separator buttons appear above other content */
  .cell-separator .absolute {
    @apply z-20;
  }
  
  /* Ensure overlay controls appear above cell content */
  .cell-container .cell-controls {
    @apply z-10;
  }
  
  /* Console output styling - terminal-like appearance */
  .console-output {
    position: relative;
  }
  
  /* Add subtle terminal-like styling */
  .console-output::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
  }
  
  /* Console output text styling */
  .console-output .space-y-1 > * {
    @apply text-muted-foreground leading-tight;
  }
  
  /* Console log level styling */
  .console-output [data-log-level="error"] {
    @apply text-red-400;
  }
  
  .console-output [data-log-level="warn"] {
    @apply text-yellow-400;
  }
  
  .console-output [data-log-level="info"] {
    @apply text-blue-400;
  }
  
  .console-output [data-log-level="log"] {
    @apply text-muted-foreground;
  }
  
  /* Code summary styling - terminal/comment-like appearance */
  .code-summary {
    position: relative;
    font-family: 'JetBrains Mono', 'Fira Code', 'Cascadia Code', 'SF Mono', Monaco, 'Inconsolata', 'Roboto Mono', 'Source Code Pro', Menlo, 'Courier New', monospace;
  }
  
  /* Add subtle syntax highlighting to code summary */
  .code-summary .text-blue-400 {
    @apply text-blue-400/90;
  }
  
  .code-summary .text-green-400 {
    @apply text-green-400/90;
  }
  
  /* Code summary hover effect */
  .code-summary:hover {
    @apply bg-muted/30;
  }
  
  /* Add subtle code editor-like styling */
  .code-summary::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 2px;
    background: linear-gradient(to bottom, rgba(59, 130, 246, 0.3), rgba(34, 197, 94, 0.3));
  }
  
  /* CodeMirror autocompletion styling */
  .cm-tooltip-autocomplete {
    @apply bg-background border border-border rounded-md shadow-lg max-h-64 overflow-hidden;
  }
  
  .cm-completionLabel {
    @apply text-foreground;
  }
  
  .cm-completionLabel-function {
    @apply text-blue-400;
  }
  
  .cm-completionLabel-variable {
    @apply text-green-400;
  }
  
  .cm-completionLabel-module {
    @apply text-purple-400;
  }
  
  .cm-completionLabel-class {
    @apply text-yellow-400;
  }
  
  .cm-completionLabel-namespace {
    @apply text-cyan-400;
  }
  
  .cm-completionLabel-constant {
    @apply text-orange-400;
  }
  
  .cm-completionLabel-property {
    @apply text-pink-400;
  }
  
  .cm-completionInfo {
    @apply bg-secondary border-l border-border text-secondary-foreground p-2 text-xs;
  }
  
  .cm-completionIcon {
    @apply mr-2;
  }
  
  .cm-completionIcon-function::before {
    content: 'ùëì';
    @apply text-blue-400;
  }
  
  .cm-completionIcon-variable::before {
    content: 'ùë•';
    @apply text-green-400;
  }
  
  .cm-completionIcon-module::before {
    content: 'üì¶';
  }
  
  .cm-completionIcon-class::before {
    content: 'üèó';
    @apply text-yellow-400;
  }
  
  .cm-completionIcon-namespace::before {
    content: 'üìÅ';
    @apply text-cyan-400;
  }
  
  .cm-completionIcon-constant::before {
    content: '‚ó¶';
    @apply text-orange-400;
  }
  
  .cm-completionIcon-property::before {
    content: '‚àò';
    @apply text-pink-400;
  }
}

/* @utility border-err {
  @apply border-1 border-error;
} */

/* Utility classes for dark mode */
.dark .plot-container { 
	 filter: invert(100%) hue-rotate(180deg); 
 }

.dark .plot-container g.cartesianlayer  g.gridlayer path {
    stroke: var(--color-muted-foreground) !important;
}
{
  "id": "danfojs-minimal-example",
  "name": "Danfo.js Minimal Example",
  "title": "Danfo.js Minimal Example",
  "description": "A minimal notebook showing Danfo.js DataFrame creation and column operations using exports object.",
  "reactiveValues": [],
  "formulas": [],
  "cells": [
    {
      "type": "markdown",
      "id": "intro",
      "content": "# Minimal Danfo.js Example\n\nThis notebook demonstrates basic DataFrame creation and column operations using Danfo.js with the new `exports` object syntax."
    },
    {
      "type": "code",
      "id": "import-danfo",
      "code": "// Import Danfo.js and create a small dataset\nexports.dfd = require('danfojs');\n\nexports.data = {\n  A: [1, 2, 5],\n  B: [10, 20, 40]\n};\nconsole.log('Danfo.js imported. Data:', exports.data);\n\n// Output module info\noutput({\n  module: 'danfojs',\n  version: exports.dfd.version || 'unknown',\n  dataShape: { rows: exports.data.A.length, columns: Object.keys(exports.data).length }\n});"
    },
    {
      "type": "code",
      "id": "create-df",
      "code": "// Create DataFrame from data\nexports.df = new dfd.DataFrame(data);\nconsole.log('DataFrame created:');\nexports.df.print();\n\n// Output DataFrame info\noutput({\n  shape: exports.df.shape,\n  columns: exports.df.columns,\n  dtypes: exports.df.dtypes\n});\noutput(exports.df);"
    },
    {
      "type": "code",
      "id": "add-column",
      "code": "// Add a new column C = A + B (immutable approach)\nexports.df2 = df.addColumn('C', df['A'].add(df['B']), { inplace: false });\nconsole.log('New DataFrame with column C:', exports.df2);\nexports.df2.print();\n\n// Output operation result\noutput({\n  operation: 'addColumn',\n  newColumn: 'C',\n  originalShape: df.shape,\n  newShape: exports.df2.shape,\n  columnC_values: exports.df2['C'].values,\n  inplace: false\n});"
    },
    {
      "type": "code",
      "id": "code_mbo5bed2_mgxxt",
      "code": "// Write your code here\noutput(df2);"
    },
    {
      "type": "code",
      "id": "sum-column",
      "code": "// Sum column C from the new DataFrame\nexports.sumC = df2['C'].sum();\nconsole.log('Sum of column C:', exports.sumC);\n\n// Output calculation summary\noutput({\n  calculation: 'sum',\n  column: 'C',\n  result: exports.sumC,\n  verification: data.A.reduce((a, b) => a + b, 0) + data.B.reduce((a, b) => a + b, 0)\n});"
    },
    {
      "type": "markdown",
      "id": "summary",
      "content": "The sum of column **C** is: **{{sumC}}**"
    },
    {
      "type": "code",
      "id": "plotting-demo",
      "code": "// Demonstrate both DOM output approaches with best practices\n\n// Method 1: Create DOM element and use output() - RECOMMENDED\nconst div1 = createDiv({\n  innerHTML: '<h3>Method 1: output(domElement) - Recommended</h3><p>DataFrame shape: ' + JSON.stringify(df2.shape) + '</p>',\n  style: 'padding: 10px; border: 1px solid var(--color-border); margin: 5px 0; background: var(--color-background);'\n});\n\n// Always use output() for DOM elements\noutput(div1);\n\n// Method 2: Also use output() for consistency\nconst div2 = createDiv({\n  innerHTML: '<h3>Method 2: output() (also recommended)</h3><p>Column C sum: ' + sumC + '</p>',\n  style: 'padding: 10px; border: 1px solid var(--color-primary); margin: 5px 0; background: var(--color-card);'\n});\n\n// Use output() for all DOM elements - this is more consistent\noutput(div2);"
    }
  ],
  "metadata": {
    "tags": [
      "danfojs",
      "minimal",
      "dataframe"
    ]
  }
}
{
  "title": "Danfo.js DataFrame Example",
  "description": "A complete notebook showing Danfo.js DataFrame creation, operations, and visualization.",
  "reactiveValues": [],
  "formulas": [],
  "cells": [
    {
      "type": "markdown",
      "id": "intro",
      "content": "# Danfo.js DataFrame Example\n\nThis notebook demonstrates DataFrame creation, operations, and visualization using Danfo.js with proper object rendering."
    },
    {
      "type": "code",
      "id": "import-danfo",
      "code": "// Import Danfo.js\nexports.dfd = require('danfojs-node');\n\nconsole.log('Danfo.js imported successfully');\noutput({ module: 'danfojs-node', status: 'loaded' });"
    },
    {
      "type": "code",
      "id": "create-data",
      "code": "// Create sample dataset\nexports.salesData = {\n  product: ['Laptop', 'Phone', 'Tablet', 'Watch', 'Headphones'],\n  price: [999, 599, 399, 299, 199],\n  quantity: [10, 25, 15, 30, 40],\n  category: ['Electronics', 'Electronics', 'Electronics', 'Wearables', 'Audio']\n};\n\nconsole.log('Sample data created:', exports.salesData);\noutput(exports.salesData);"
    },
    {
      "type": "code",
      "id": "create-dataframe",
      "code": "// Create DataFrame from data\nexports.df = new dfd.DataFrame(salesData);\n\nconsole.log('DataFrame created:');\nconsole.log('Shape:', df.shape);\nconsole.log('Columns:', df.columns);\n\n// Output the DataFrame - this will be rendered using the specialized renderer\noutput(exports.df);"
    },
    {
      "type": "code",
      "id": "add-revenue-column",
      "code": "// Calculate revenue (price * quantity) and add as new column\nexports.priceColumn = df.column('price');\nexports.quantityColumn = df.column('quantity');\nexports.revenueColumn = priceColumn.mul(quantityColumn);\n\n// Add revenue column to DataFrame\nexports.dfWithRevenue = df.addColumn('revenue', revenueColumn, { inplace: false });\n\nconsole.log('Added revenue column');\nconsole.log('New shape:', dfWithRevenue.shape);\n\n// Output the updated DataFrame\noutput(exports.dfWithRevenue);"
    },
    {
      "type": "code",
      "id": "statistical-operations",
      "code": "// Perform statistical operations\nexports.stats = {\n  totalRevenue: dfWithRevenue.column('revenue').sum(),\n  avgPrice: dfWithRevenue.column('price').mean(),\n  maxQuantity: dfWithRevenue.column('quantity').max(),\n  minPrice: dfWithRevenue.column('price').min()\n};\n\nconsole.log('Statistical summary:', exports.stats);\n\n// Get revenue series for further analysis\nexports.revenueSeries = dfWithRevenue.column('revenue');\n\n// Output statistics and the revenue series\noutput(exports.stats, exports.revenueSeries);"
    },
    {
      "type": "code",
      "id": "filter-data",
      "code": "// Filter data for high-value products (price > 300)\nexports.highValueFilter = dfWithRevenue.column('price').gt(300);\nexports.highValueProducts = dfWithRevenue.loc({ rows: highValueFilter });\n\nconsole.log('High-value products (price > $300):');\nconsole.log('Count:', highValueProducts.shape[0]);\n\n// Output the filtered DataFrame\noutput(exports.highValueProducts);"
    },
    {
      "type": "code",
      "id": "group-operations",
      "code": "// Group by category and calculate total revenue\nexports.categoryRevenue = dfWithRevenue.groupby(['category']).agg({ revenue: 'sum' });\n\nconsole.log('Revenue by category:');\n\n// Output the grouped result\noutput(exports.categoryRevenue);"
    },
    {
      "type": "markdown",
      "id": "summary",
      "content": "## Summary\n\n- **Total Revenue**: ${{totalRevenue}}\n- **Average Price**: ${{avgPrice}}\n- **Products with price > $300**: {{highValueProducts.shape[0]}} items\n\nThe DataFrames and Series above are rendered using specialized table components that provide a clean, interactive view of the data."
    }
  ],
  "metadata": {
    "tags": ["danfojs", "dataframe", "data-analysis"]
  }
}

````xml
<VSCode.Cell language="markdown">
# Module Resolution Debugging

This notebook helps diagnose why modules can't be loaded from user data and notebook folders despite `require.paths` being set correctly.
</VSCode.Cell>
<VSCode.Cell language="javascript">
// Test 1: Check current module resolution state
console.log('=== Current Module Resolution State ===');

// Check require.paths
console.log('require.paths:');
if (require.paths) {
    require.paths.forEach((path, index) => {
        console.log(`  [${index}] ${path}`);
    });
} else {
    console.log('  require.paths is not available');
}

// Check NODE_PATH
console.log('\nNODE_PATH:', process.env.NODE_PATH || 'not set');

// Check Module._nodeModulePaths for current directory
const Module = require('module');
console.log('\nModule._nodeModulePaths for current directory:');
try {
    const currentPaths = Module._nodeModulePaths(process.cwd());
    currentPaths.slice(0, 10).forEach((path, index) => {
        console.log(`  [${index}] ${path}`);
    });
} catch (error) {
    console.log('  Error getting _nodeModulePaths:', error.message);
}

exports.moduleState = {
    requirePaths: require.paths || [],
    nodePath: process.env.NODE_PATH || null,
    cwd: process.cwd()
};
</VSCode.Cell>
<VSCode.Cell language="javascript">
// Test 2: Try to resolve modules from different paths
console.log('=== Module Resolution Test ===');

const Module = require('module');
const path = require('path');

// Test modules that might exist in different locations
const testModules = ['zx', 'lodash', 'axios', 'moment', 'chalk'];

const results = [];

for (const moduleName of testModules) {
    try {
        // Try to resolve the module (doesn't load it, just finds it)
        const resolvedPath = require.resolve(moduleName);
        console.log(`✓ ${moduleName} resolved to: ${resolvedPath}`);
        results.push({
            module: moduleName,
            status: 'RESOLVED',
            path: resolvedPath
        });
    } catch (error) {
        console.log(`✗ ${moduleName} not found: ${error.message}`);
        results.push({
            module: moduleName,
            status: 'NOT_FOUND',
            error: error.message
        });
    }
}

output.table(results);
exports.resolutionResults = results;
</VSCode.Cell>
<VSCode.Cell language="javascript">
// Test 3: Manual path testing
console.log('=== Manual Path Testing ===');

const fs = require('fs');
const path = require('path');

// Get the paths we expect to work
const pathsToTest = require.paths || [];

console.log('Testing each require.paths entry:');

const pathResults = [];

pathsToTest.forEach((testPath, index) => {
    try {
        const exists = fs.existsSync(testPath);
        console.log(`[${index}] ${testPath} - Exists: ${exists}`);
        
        if (exists) {
            try {
                const contents = fs.readdirSync(testPath);
                const packages = contents.filter(name => !name.startsWith('.')).slice(0, 5);
                console.log(`    Packages: ${packages.join(', ')}${contents.length > 5 ? '...' : ''}`);
                
                pathResults.push({
                    index,
                    path: testPath,
                    exists: true,
                    packageCount: contents.length,
                    samplePackages: packages
                });
            } catch (error) {
                console.log(`    Error reading directory: ${error.message}`);
                pathResults.push({
                    index,
                    path: testPath,
                    exists: true,
                    error: error.message
                });
            }
        } else {
            pathResults.push({
                index,
                path: testPath,
                exists: false
            });
        }
    } catch (error) {
        console.log(`[${index}] ${testPath} - Error: ${error.message}`);
        pathResults.push({
            index,
            path: testPath,
            error: error.message
        });
    }
});

output.table(pathResults);
exports.pathResults = pathResults;
</VSCode.Cell>
<VSCode.Cell language="javascript">
// Test 4: Force NODE_PATH update and test
console.log('=== Force NODE_PATH Update Test ===');

// Get the first two paths from require.paths (user data and notebook)
const pathsToAdd = (require.paths || []).slice(0, 2);

if (pathsToAdd.length > 0) {
    console.log('Attempting to force NODE_PATH update with:', pathsToAdd);
    
    // Set NODE_PATH
    const currentNodePath = process.env.NODE_PATH || '';
    const pathSeparator = require('path').delimiter;
    
    const newNodePath = pathsToAdd.concat(currentNodePath ? [currentNodePath] : []).join(pathSeparator);
    process.env.NODE_PATH = newNodePath;
    
    console.log('New NODE_PATH:', process.env.NODE_PATH);
    
    // Force reinitialize
    try {
        delete require.cache[require.resolve('module')];
        const Module = require('module');
        Module._initPaths();
        console.log('✓ Successfully reinitialized module paths');
        
        // Test resolution again
        console.log('\nTesting module resolution after NODE_PATH update:');
        
        const testModules = ['zx', 'lodash'];
        for (const moduleName of testModules) {
            try {
                const resolvedPath = require.resolve(moduleName);
                console.log(`✓ ${moduleName} now resolves to: ${resolvedPath}`);
            } catch (error) {
                console.log(`✗ ${moduleName} still not found: ${error.message}`);
            }
        }
        
    } catch (error) {
        console.log('✗ Failed to reinitialize:', error.message);
    }
} else {
    console.log('No paths to test');
}
</VSCode.Cell>
<VSCode.Cell language="markdown">
## Analysis

This notebook tests the module resolution issue. The key findings should be:

1. **First cell**: Shows that `require.paths` is set correctly but `NODE_PATH` is not set
2. **Second cell**: Shows which modules can actually be resolved vs. which cannot
3. **Third cell**: Verifies that the paths in `require.paths` actually exist and contain packages
4. **Fourth cell**: Tests if manually setting `NODE_PATH` and calling `Module._initPaths()` fixes the issue

The problem is likely that Node.js ignores `require.paths` in favor of its internal module resolution algorithm, which primarily uses `NODE_PATH` and the default search locations.
</VSCode.Cell>
````

{
  "id": "dom-output-patterns-example",
  "name": "DOM Output Patterns Example",
  "title": "DOM Output Patterns Example",      "description": "Comprehensive example showing DOM output best practices: output() function (recommended), outEl (advanced), and auto-outputting helpers",
  "reactiveValues": [],
  "formulas": [],
  "cells": [
    {
      "type": "markdown",
      "id": "intro",
      "content": "# DOM Output Patterns Example\n\nThis notebook demonstrates the three main approaches for DOM output in Nodebook.js:\n\n1. **`output(anything)`** - Universal output function for any content\n2. **`createContainer()`** - Auto-outputting styled containers \n3. **`createDiv()`** - Raw DOM elements for manual control\n\n**Key Insight**: Choose based on your use case - automatic vs manual control, styling vs raw elements."
    },
    {
      "type": "code",
      "id": "method1-output",
      "code": "// Method 1: output() function - Universal output for any content\n// Use this for: data objects, third-party library elements, manual DOM elements\n\nconsole.log('Creating content with output() function...');\n\n// Example 1: Output data objects\nconst analysisResults = {\n    totalSales: 125000,\n    growth: '+15.2%',\n    topProduct: 'Widget Pro',\n    summary: 'Strong performance this quarter'\n};\n\n// Output data - shows interactive JSON viewer\noutput(analysisResults);\n\n// Example 2: Create and output custom DOM element\nconst customCard = createDiv({\n    innerHTML: `\n        <h3 style=\"margin: 0 0 10px 0; color: var(--foreground);\">Method 1: output() Function ‚úÖ</h3>\n        <p>Perfect for:</p>\n        <ul>\n            <li><strong>Data objects</strong> - Automatic JSON viewer</li>\n            <li><strong>Third-party library elements</strong> - Charts, widgets, etc.</li>\n            <li><strong>Custom DOM elements</strong> - Full control over styling</li>\n            <li><strong>Mixed content</strong> - Multiple outputs in sequence</li>\n        </ul>\n        <div style=\"background: var(--muted); padding: 10px; border-radius: 4px; margin-top: 10px;\">\n            üéØ Use when you want <strong>manual control</strong> over what gets displayed\n        </div>\n    `,\n    style: `\n        padding: 20px;\n        border: 2px solid var(--primary);\n        border-radius: 8px;\n        background: var(--card);\n        margin: 10px 0;\n    `\n});\n\n// Manual output - you control when it appears\noutput(customCard);\n\nconsole.log('‚úÖ Content displayed using output() function');\nexports.method1Status = 'completed';"
    },
    {
      "type": "code",
      "id": "method2-createcontainer",
      "code": "// Method 2: createContainer() - Auto-outputting styled containers\n// Use this for: Quick styled containers, dashboards, when you need an ID for third-party libraries\n\nconsole.log('Creating auto-outputting container...');\n\n// createContainer() automatically outputs itself with default styling\nconst dashboard = createContainer({\n    style: 'border: 2px solid var(--primary);' // Additional styling\n});\n\n// Add title\nconst title = createTitle('Method 2: createContainer() - Auto-Output ‚úÖ', 3);\ndashboard.appendChild(title);\n\n// Add content explaining the use case\nconst description = createDiv({\n    innerHTML: `\n        <p>This container was created with <code>createContainer()</code> and <strong>automatically outputs itself</strong>.</p>\n        <p><strong>Perfect for:</strong></p>\n        <ul>\n            <li><strong>Quick prototyping</strong> - Instant styled containers</li>\n            <li><strong>Third-party library integration</strong> - Need an ID to pass to libraries</li>\n            <li><strong>Dashboards</strong> - Automatic consistent styling</li>\n            <li><strong>Rich layouts</strong> - Built-in padding, borders, styling</li>\n        </ul>\n        <div style=\"background: var(--muted); padding: 10px; border-radius: 4px; margin-top: 10px;\">\n            üöÄ <strong>Key Benefit:</strong> Auto-outputs with beautiful default styling - no manual output() needed!\n        </div>\n    `,\n    style: 'margin: 15px 0;'\n});\ndashboard.appendChild(description);\n\n// Example: Perfect for third-party library integration\nconst chartContainer = createDiv({\n    innerHTML: `\n        <h4>Example: Third-Party Library Integration</h4>\n        <p>Pass the container's ID to libraries like Plotly, D3, Chart.js:</p>\n        <code style=\"background: var(--muted); padding: 5px; border-radius: 3px; display: block; margin: 10px 0;\">\n            // The container automatically has an ID you can use<br>\n            Plotly.newPlot(dashboard.id, data, layout);<br>\n            // or D3.select('#' + dashboard.id).append('svg')...\n        </code>\n        <p><strong>Container ID:</strong> <span style=\"font-family: monospace; background: var(--muted); padding: 2px 4px;\">${dashboard.id}</span></p>\n    `,\n    style: 'background: var(--card); padding: 15px; border-radius: 6px; margin: 15px 0; border: 1px solid var(--border);'\n});\ndashboard.appendChild(chartContainer);\n\n// Note: No need for output(dashboard) - it auto-outputs itself!\nconsole.log('‚úÖ Auto-outputting container created with ID:', dashboard.id);\nexports.method2Status = 'completed';\nexports.containerId = dashboard.id;"
    },
    {
      "type": "code",
      "id": "method3-creatediv",
      "code": "// Method 3: createDiv() - Raw DOM elements for maximum control\n// Use this for: Building complex structures, third-party library containers, custom styling\n\nconsole.log('Creating raw DOM elements with createDiv()...');\n\n// createDiv() does NOT auto-output - gives you full control\nconst mainContainer = createDiv({\n    style: 'border: 2px solid var(--border); border-radius: 8px; background: var(--card); margin: 10px 0;'\n});\n\n// Build complex structure piece by piece\nconst header = createDiv({\n    innerHTML: '<h3 style=\"margin: 0; padding: 15px; background: var(--primary); color: var(--primary-foreground); border-radius: 6px 6px 0 0;\">Method 3: createDiv() - Raw Control ‚öôÔ∏è</h3>'\n});\nmainContainer.appendChild(header);\n\nconst content = createDiv({\n    innerHTML: `\n        <div style=\"padding: 20px;\">\n            <p><code>createDiv()</code> creates raw DOM elements without auto-output.</p>\n            <p><strong>Perfect for:</strong></p>\n            <ul>\n                <li><strong>Complex DOM structures</strong> - Build incrementally</li>\n                <li><strong>Third-party library containers</strong> - Pass to D3, Plotly, etc.</li>\n                <li><strong>Custom styling</strong> - No default styles to override</li>\n                <li><strong>Conditional output</strong> - You decide when to display</li>\n            </ul>\n        </div>\n    `\n});\nmainContainer.appendChild(content);\n\n// Example: Building a grid layout\nconst gridContainer = createDiv({\n    style: 'display: grid; grid-template-columns: 1fr 1fr; gap: 15px; padding: 20px; background: var(--muted); margin: 10px 0; border-radius: 6px;'\n});\n\n// Add grid items\nfor (let i = 1; i <= 4; i++) {\n    const gridItem = createDiv({\n        innerHTML: `\n            <h4>Grid Item ${i}</h4>\n            <p>Raw createDiv() element</p>\n            <p><strong>ID:</strong> <code>${'item-' + i}</code></p>\n        `,\n        style: 'background: var(--card); padding: 15px; border-radius: 4px; border: 1px solid var(--border);'\n    });\n    gridContainer.appendChild(gridItem);\n}\n\nmainContainer.appendChild(gridContainer);\n\n// Example: Third-party library integration\nconst libraryExample = createDiv({\n    innerHTML: `\n        <div style=\"padding: 20px; background: var(--accent); border-radius: 6px; margin: 10px 0;\">\n            <h4>Third-Party Library Integration Example</h4>\n            <p>Pass the element or its ID to libraries:</p>\n            <code style=\"display: block; background: var(--muted); padding: 10px; border-radius: 4px; margin: 10px 0; white-space: pre-line;\">\n// Get reference to the div\nconst plotContainer = createDiv({ style: 'height: 400px;' });\n\n// Pass to Plotly\nPlotly.newPlot(plotContainer, data, layout);\n\n// Or pass ID to D3\nD3.select('#' + plotContainer.id).append('svg')...\n\n// Then output when ready\noutput(plotContainer);\n            </code>\n            <p>üéØ <strong>Key advantage:</strong> Full control over when and how elements are displayed</p>\n        </div>\n    `\n});\nmainContainer.appendChild(libraryExample);\n\n// Manual output - you control exactly when it appears\noutput(mainContainer);\n\nconsole.log('‚úÖ Raw DOM structure built and manually output');\nexports.method3Status = 'completed';"
    },
    {
      "type": "markdown",
      "id": "summary",
      "content": "## Summary of DOM Output Methods\n\n### When to Use Each Method\n\n| Method | Best For | Auto-Output | Control Level |\n|--------|----------|-------------|---------------|\n| `output()` | **Data, objects, general content** | ‚úÖ Yes | Medium |\n| `createContainer()` | **Styled UI components, dashboards** | ‚úÖ Yes | Medium |\n| `createDiv()` | **Raw DOM, third-party libraries** | ‚ùå Manual | High |\n\n### Quick Decision Guide\n\n- **Displaying data/objects?** ‚Üí **Always use `output()`** ‚úÖ\n- **Need a styled container/dashboard?** ‚Üí Use `createContainer()` üé®\n- **Building complex DOM or using libraries?** ‚Üí Use `createDiv()` + `output()` ‚öôÔ∏è\n- **Not sure?** ‚Üí Start with `output()` - it works for everything! ÔøΩ\n\n### Status Check\n- Method 1 (output): **{{method1Status}}** ‚úÖ\n- Method 2 (createContainer): **{{method2Status}}** üé®\n- Method 3 (createDiv): **{{method3Status}}** ‚öôÔ∏è\n\n> üí° **Best Practice**: Use `output()` for 90% of your needs. Use `createContainer()` for styled UI. Use `createDiv()` for libraries and complex DOM building."
    },
    {
      "type": "code",
      "id": "bonus-combined",
      "code": "// Bonus: Real-world example combining all three methods\n// Shows when and how to use each method in practice\n\nconsole.log('Creating real-world example combining all methods...');\n\n// Method 1: output() for data analysis results\nconst salesData = {\n    totalRevenue: 145000,\n    topProducts: ['Widget Pro', 'Gadget Max', 'Tool Elite'],\n    quarterlyGrowth: '+23.5%',\n    analysis: 'Strong performance across all product lines'\n};\n\nconsole.log('üìä Displaying sales analysis data with output():');\noutput(salesData); // Perfect for data objects\n\n// Method 2: createContainer() for a styled dashboard\nconsole.log('üé® Creating styled dashboard with createContainer():');\nconst dashboard = createContainer({\n    style: 'border: 2px solid var(--primary); margin: 20px 0;'\n});\n\n// Add dashboard title\nconst dashboardTitle = createTitle('Sales Dashboard üìà', 3);\ndashboard.appendChild(dashboardTitle);\n\n// Add quick stats\nconst quickStats = createDiv({\n    innerHTML: `\n        <div style=\"display: grid; grid-template-columns: repeat(3, 1fr); gap: 15px; margin: 15px 0;\">\n            <div style=\"background: var(--muted); padding: 15px; border-radius: 6px; text-align: center;\">\n                <h4 style=\"margin: 0; color: var(--primary);\">Revenue</h4>\n                <p style=\"margin: 5px 0 0 0; font-size: 1.2em; font-weight: bold;\">$${salesData.totalRevenue.toLocaleString()}</p>\n            </div>\n            <div style=\"background: var(--muted); padding: 15px; border-radius: 6px; text-align: center;\">\n                <h4 style=\"margin: 0; color: var(--primary);\">Growth</h4>\n                <p style=\"margin: 5px 0 0 0; font-size: 1.2em; font-weight: bold; color: var(--success);\">${salesData.quarterlyGrowth}</p>\n            </div>\n            <div style=\"background: var(--muted); padding: 15px; border-radius: 6px; text-align: center;\">\n                <h4 style=\"margin: 0; color: var(--primary);\">Products</h4>\n                <p style=\"margin: 5px 0 0 0; font-size: 1.2em; font-weight: bold;\">${salesData.topProducts.length}</p>\n            </div>\n        </div>\n    `\n});\ndashboard.appendChild(quickStats);\n\n// Dashboard auto-outputs itself - no manual output() needed!\n\n// Method 3: createDiv() for custom chart container (simulating third-party library)\nconsole.log('‚öôÔ∏è Building custom chart container with createDiv():');\nconst chartContainer = createDiv({\n    style: `\n        border: 2px dashed var(--border);\n        border-radius: 8px;\n        background: var(--card);\n        margin: 20px 0;\n        padding: 20px;\n        text-align: center;\n    `\n});\n\n// Build chart content incrementally\nconst chartTitle = createDiv({\n    innerHTML: '<h3 style=\"margin: 0 0 15px 0;\">üìä Sales Chart Container</h3>'\n});\nchartContainer.appendChild(chartTitle);\n\nconst chartPlaceholder = createDiv({\n    innerHTML: `\n        <div style=\"\n            height: 200px;\n            background: linear-gradient(45deg, var(--muted) 25%, transparent 25%, transparent 75%, var(--muted) 75%),\n                        linear-gradient(45deg, var(--muted) 25%, transparent 25%, transparent 75%, var(--muted) 75%);\n            background-size: 20px 20px;\n            background-position: 0 0, 10px 10px;\n            border-radius: 6px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-weight: bold;\n            color: var(--foreground);\n        \">\n            Chart would render here<br>\n            (Pass chartContainer to Plotly, D3, etc.)\n        </div>\n    `\n});\nchartContainer.appendChild(chartPlaceholder);\n\nconst libraryExample = createDiv({\n    innerHTML: `\n        <div style=\"background: var(--accent); padding: 10px; border-radius: 4px; margin-top: 15px; font-family: monospace; font-size: 0.9em;\">\n            // Example third-party library usage:<br>\n            Plotly.newPlot(chartContainer, data, layout);<br>\n            // Container ID: ${chartContainer.id}\n        </div>\n    `\n});\nchartContainer.appendChild(libraryExample);\n\n// Manual output when ready - full control\noutput(chartContainer);\n\n// Summary table showing all three methods used\nconst summaryTable = [\n    { 'Method': 'output(salesData)', 'Use Case': 'Data Analysis Results', 'Auto-Output': 'Yes' },\n    { 'Method': 'createContainer()', 'Use Case': 'Styled Dashboard', 'Auto-Output': 'Yes' },\n    { 'Method': 'createDiv() + output()', 'Use Case': 'Chart Container', 'Auto-Output': 'Manual' }\n];\n\nconsole.log('üìã Summary of methods used:');\noutput.table(summaryTable);\n\nexports.realWorldExample = 'complete';\nexports.methodsUsed = ['output()', 'createContainer()', 'createDiv()'];\nexports.recommendation = 'Choose method based on use case: data ‚Üí output(), UI ‚Üí createContainer(), libraries ‚Üí createDiv()';\n\nconsole.log('‚úÖ Real-world example complete - all three methods demonstrated!');"
    }
  ],
  "metadata": {
    "tags": [
      "dom-output",
      "examples",
      "outEl",
      "output-function",
      "auto-outputting",
      "tutorial"
    ]
  }
}

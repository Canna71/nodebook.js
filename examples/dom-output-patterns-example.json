{
  "id": "dom-output-patterns-example",
  "name": "DOM Output Patterns Example",
  "title": "DOM Output Patterns Example",      "description": "Comprehensive example showing DOM output best practices: output() function (recommended), outEl (advanced), and auto-outputting helpers",
  "reactiveValues": [],
  "formulas": [],
  "cells": [
    {
      "type": "markdown",
      "id": "intro",
      "content": "# DOM Output Patterns Example\n\nThis notebook demonstrates the recommended approaches for DOM output in Nodebook.js:\n\n1. **`output(element)`** - Recommended for all DOM elements\n2. **`outEl.appendChild()`** - Advanced cases requiring direct DOM manipulation\n3. **Auto-outputting helpers** - Containers that output themselves\n\n**Key Recommendation**: Always use `output()` for DOM elements unless you specifically need direct DOM manipulation."
    },
    {
      "type": "code",
      "id": "method1-output",
      "code": "// Method 1: output() function (RECOMMENDED for all DOM elements)\n// This is the standard and recommended approach for displaying DOM elements\n\nconsole.log('Creating DOM element with output() function...');\n\n// Create a DOM element using DOM helpers\nconst card = createDiv({\n    innerHTML: `\n        <h3 style=\"margin: 0 0 10px 0; color: var(--color-primary);\">Method 1: output() Function ‚úÖ</h3>\n        <p>This element was created and passed to the <code>output()</code> function.</p>\n        <p><strong>Use Case:</strong> All DOM elements, single or multiple outputs, visualizations</p>\n        <div style=\"background: var(--color-success); padding: 10px; border-radius: 4px; margin-top: 10px;\">\n            üéØ This is the <strong>recommended</strong> method for all DOM elements\n        </div>\n    `,\n    style: `\n        padding: 20px;\n        border: 2px solid var(--color-success);\n        border-radius: 8px;\n        background: var(--color-card);\n        margin: 10px 0;\n    `\n});\n\n// Use output() function - this is the recommended approach\noutput(card);\n\nconsole.log('‚úÖ Element displayed using output() function');\nexports.method1Status = 'completed';"
    },
    {
      "type": "code",
      "id": "method2-outel",
      "code": "// Method 2: outEl.appendChild() (ADVANCED - only when needed)\n// Use this only for complex DOM manipulation that requires direct access\n\nconsole.log('Demonstrating advanced outEl usage...');\n\n// This is an advanced example where outEl might be needed\nif (outEl) {\n    console.log('‚úÖ outEl container available for advanced manipulation');\n    \n    // Example: Building a complex interactive structure incrementally\n    const container = createDiv({\n        style: `\n            padding: 20px;\n            border: 2px solid var(--color-warning);\n            border-radius: 8px;\n            background: var(--color-card);\n            margin: 10px 0;\n        `\n    });\n    \n    // Add title\n    container.appendChild(createTitle('Method 2: outEl.appendChild() (Advanced)', 3));\n    \n    // Add description\n    const description = createDiv({\n        innerHTML: `\n            <p>This example shows <strong>advanced</strong> usage of outEl for incremental DOM building.</p>\n            <p><strong>Use Case:</strong> Complex DOM structures, direct manipulation, library integration</p>\n            <div style=\"background: var(--color-warning); padding: 10px; border-radius: 4px; margin-top: 10px;\">\n                ‚ö†Ô∏è Only use this for <strong>advanced cases</strong> - prefer output() for most DOM elements\n            </div>\n        `\n    });\n    container.appendChild(description);\n    \n    // Add interactive elements (this is where outEl might be needed)\n    const interactiveSection = createDiv({\n        style: 'margin-top: 15px; padding: 10px; background: var(--color-accent); border-radius: 4px;'\n    });\n    \n    // This kind of incremental building might require outEl\n    interactiveSection.appendChild(createDiv({ innerHTML: '<strong>Step 1:</strong> Create container' }));\n    interactiveSection.appendChild(createDiv({ innerHTML: '<strong>Step 2:</strong> Add elements incrementally' }));\n    interactiveSection.appendChild(createDiv({ innerHTML: '<strong>Step 3:</strong> Append to outEl' }));\n    \n    container.appendChild(interactiveSection);\n    \n    // Finally append to outEl - this is where the advanced manipulation happens\n    outEl.appendChild(container);\n    \n    console.log('‚úÖ Advanced DOM structure built with outEl');\n} else {\n    console.error('‚ùå outEl container not available');\n}\n\nexports.method2Status = 'completed';"
    },
    {
      "type": "code",
      "id": "method3-auto-output",
      "code": "// Method 3: Auto-outputting helpers (advanced layouts)\n// Perfect for rich layouts, dashboards, automatic styling\n\nconsole.log('Creating auto-outputting containers...');\n\n// Create a container that automatically outputs itself\nconst dashboard = createContainer({\n    style: 'border: 2px solid var(--color-accent);'\n});\n\n// Add title\nconst title = createTitle('Method 3: Auto-Outputting Helpers', 3);\ndashboard.appendChild(title);\n\n// Add description\nconst description = createDiv({\n    innerHTML: `\n        <p>This container was created with <code>createContainer()</code> and automatically outputs itself.</p>\n        <p><strong>Use Case:</strong> Rich layouts, dashboards, complex UIs with automatic styling</p>\n    `,\n    style: 'margin-bottom: 15px;'\n});\ndashboard.appendChild(description);\n\n// Add a stats grid\nconst stats = {\n    'Total Methods': 3,\n    'Recommended': 'output()',\n    'Simplest': 'outEl',\n    'Most Powerful': 'Auto-helpers'\n};\nconst statsGrid = createKeyValueGrid(stats, {\n    columns: 'repeat(2, 1fr)',\n    style: 'margin: 15px 0;'\n});\ndashboard.appendChild(statsGrid);\n\n// Add feature comparison\nconst comparison = createDiv({\n    innerHTML: `\n        <div style=\"background: var(--color-accent); padding: 15px; border-radius: 6px; margin-top: 15px;\">\n            <h4 style=\"margin: 0 0 10px 0;\">üöÄ Key Benefits of Auto-Outputting Helpers:</h4>\n            <ul style=\"margin: 0; padding-left: 20px;\">\n                <li>Automatic styling with CSS variables</li>\n                <li>Auto-generated unique IDs</li>\n                <li>Consistent look and feel</li>\n                <li>Rich layout components (grids, titles, buttons)</li>\n                <li>Automatically output themselves</li>\n            </ul>\n        </div>\n    `\n});\ndashboard.appendChild(comparison);\n\n// Note: The container automatically outputs itself!\n// No need for output(dashboard) or outEl.appendChild(dashboard)\n\nconsole.log('‚úÖ Auto-outputting container created');\nexports.method3Status = 'completed';"
    },
    {
      "type": "markdown",
      "id": "summary",
      "content": "## Summary of DOM Output Methods\n\n### When to Use Each Method\n\n| Method | Best For | Pros | Cons |\n|--------|----------|------|------|\n| `output(element)` | **All DOM elements (recommended)** | Clear intent, error handling, multiple outputs | Requires manual styling |\n| `outEl.appendChild()` | Advanced direct DOM manipulation | Direct control, incremental building | Advanced use only, no validation |\n| Auto-outputting helpers | Rich UIs, dashboards | Automatic styling, consistent look | Less control over timing |\n\n### Quick Decision Guide\n\n- **Have a DOM element to display?** ‚Üí **Always use `output(element)`** ‚úÖ\n- **Need multiple elements?** ‚Üí Use `output(el1, el2)` or multiple `output()` calls ‚úÖ\n- **Building complex DOM incrementally?** ‚Üí Consider `outEl.appendChild()` (advanced) ‚ö†Ô∏è\n- **Building a rich dashboard?** ‚Üí Use auto-outputting helpers üöÄ\n\n### All Methods Status\n- Method 1 (output): **{{method1Status}}** ‚úÖ\n- Method 2 (outEl advanced): **{{method2Status}}** ‚ö†Ô∏è\n- Method 3 (auto-helpers): **{{method3Status}}** üöÄ\n\n> üí° **Best Practice**: Use `output()` for all DOM elements unless you specifically need advanced DOM manipulation with `outEl`."
    },
    {
      "type": "code",
      "id": "bonus-combined",
      "code": "// Bonus: Best practices in action\n// This shows the recommended approach for most scenarios\n\nconsole.log('Demonstrating best practices...');\n\n// Best Practice 1: Use output() for single elements\nconst header = createTitle('üéØ Best Practices Demo', 2);\noutput(header);\n\n// Best Practice 2: Use output() for main content\nconst mainContent = createDiv({\n    innerHTML: `\n        <p>This demonstrates the <strong>recommended approach</strong>:</p>\n        <ol>\n            <li><strong>output()</strong> for the header above ‚úÖ</li>\n            <li><strong>output()</strong> for this main content ‚úÖ</li>\n            <li><strong>Styled containers</strong> for the dashboard below üöÄ</li>\n        </ol>\n        <div style=\"background: var(--color-success); padding: 10px; border-radius: 4px; margin-top: 10px;\">\n            üí° <strong>Key Point:</strong> Use output() for all DOM elements unless you need advanced DOM manipulation\n        </div>\n    `,\n    style: 'padding: 15px; border: 1px solid var(--color-border); border-radius: 6px; background: var(--color-card); margin: 10px 0;'\n});\noutput(mainContent);\n\n// Best Practice 3: Styled containers with manual output\nconst dashboard = createOutElGradientContainer('Rich Layout Dashboard');\ndashboard.appendChild(createDiv({\n    innerHTML: '<p>This dashboard uses DOM helpers with manual output for rich layouts!</p>',\n    style: 'margin: 0 0 15px 0;'\n}));\n\n// Summary stats showing the recommended approach\nconst bestPracticeStats = {\n    'DOM Elements': 'output() ‚úÖ',\n    'Rich Layouts': 'DOM helpers + output() üöÄ',\n    'Advanced Cases': 'outEl ‚ö†Ô∏è',\n    'Recommendation': 'output() first'\n};\nconst statsGrid = createKeyValueGrid(bestPracticeStats);\ndashboard.appendChild(statsGrid);\n\n// Manual output to display the dashboard\noutput(dashboard);\n\nconsole.log('‚úÖ Best practices demonstration complete');\nexports.bestPracticesDemo = 'success';"
    }
  ],
  "metadata": {
    "tags": [
      "dom-output",
      "examples",
      "outEl",
      "output-function",
      "auto-outputting",
      "tutorial"
    ]
  }
}

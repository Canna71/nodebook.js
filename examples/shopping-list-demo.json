{
  "id": "shopping-list-demo",
  "title": "Shopping List with Storage Demo",
  "description": "Interactive shopping list demonstrating the storage system with DataFrames",
  "cells": [
    {
      "id": "intro-cell",
      "type": "markdown",
      "content": "# Shopping List with Storage Demo\n\nThis notebook demonstrates the storage system with a practical example: a shopping list manager.\n\n## Features:\n- **Persistent Data**: Shopping list items are saved to notebook storage\n- **Reactive Updates**: Total cost and item count update automatically\n- **DataFrame Integration**: Uses danfojs for data management\n- **Storage Management**: Automatically saves/loads from storage\n\n## Current Storage Status:\n- **Keys in Storage**: {{storage.keys().length}}\n- **Has Shopping Data**: {{storage.has('shopping_list') ? 'Yes' : 'No'}}\n- **Last Updated**: {{storage.get('shopping_list_updated') || 'Never'}}"
    },
    {
      "id": "initialize-data-cell",
      "type": "code",
      "code": "// Initialize Shopping List DataFrame\nconst dfd = require('danfojs');\n\nconsole.log('=== Shopping List Initialization ===');\n\n// Try to load existing data from storage first\nlet shoppingData;\nif (storage.has('shopping_list')) {\n  console.log('📦 Loading existing shopping list from storage...');\n  const storedData = storage.get('shopping_list');\n  \n  // Reconstruct DataFrame from stored data\n  shoppingData = {\n    item: storedData.item,\n    price: storedData.price,\n    quantity: storedData.quantity\n  };\n  \n  console.log('✅ Loaded', storedData.item.length, 'items from storage');\n} else {\n  console.log('🆕 No existing data found, creating new shopping list...');\n  \n  // Create initial shopping list with sample data\n  shoppingData = {\n    item: ['Apples', 'Bread', 'Milk', 'Eggs'],\n    price: [3.50, 2.25, 4.80, 5.20],\n    quantity: [6, 1, 2, 12]\n  };\n  \n  console.log('✅ Created new shopping list with sample items');\n}\n\n// Create DataFrame\nconst shoppingList = new dfd.DataFrame(shoppingData);\n\nconsole.log('\\n📊 Current Shopping List:');\nshoppingList.print();\n\nconsole.log('\\n📈 DataFrame Info:');\nconsole.log('Shape:', shoppingList.shape);\nconsole.log('Columns:', shoppingList.columns);\n\n// Output the DataFrame for editing\nconsole.log('\\n📝 Outputting editable shopping list...');\noutput(shoppingList);\n\n// Export for use in other cells\nexports.shoppingList = shoppingList;\nexports.lastUpdated = new Date().toISOString();\n\nconsole.log('\\n✅ Shopping list initialized, displayed, and exported!');"
    },
    {
      "id": "display-status-cell",
      "type": "markdown",
      "content": "## Shopping List Status\n\n**Current Shopping List**: {{shoppingList ? shoppingList.shape[0] : 0}} items\n\n**Storage Status**: {{storage.has('shopping_list') ? '💾 Saved' : '⚠️ Not Saved'}}\n**Last Updated**: {{storage.get('shopping_list_updated') || 'Never'}}\n\n### 📝 **Editable Table**\nThe shopping list DataFrame is displayed above as an editable table. You can:\n- **Click on cells** to edit item names, prices, or quantities\n- **Add/remove rows** using the table controls\n- **Changes are automatically reflected** in the `shoppingList` variable\n\n### 📊 **Quick Stats**\n- **DataFrame Shape**: {{shoppingList ? shoppingList.shape[0] + ' rows × ' + shoppingList.shape[1] + ' columns' : 'Not available'}}\n- **Has Data**: {{shoppingList ? 'Yes' : 'No'}}\n- **Storage Version**: {{storage.has('shopping_list') ? 'Saved' : 'Not saved'}}"
    },
    {
      "id": "calculate-totals-cell",
      "type": "code",
      "code": "// Calculate Shopping List Totals using DataFrame operations\nconsole.log('=== Shopping List Calculations ===');\n\nif (shoppingList) {\n  console.log('� Calculating totals using DataFrame operations...');\n  \n  // Create a calculation DataFrame with subtotal column\n  const calculationData = {\n    item: shoppingList.loc({columns: ['item']}).values.flat(),\n    price: shoppingList.loc({columns: ['price']}).values.flat(),\n    quantity: shoppingList.loc({columns: ['quantity']}).values.flat()\n  };\n  \n  // Add calculated subtotal column\n  calculationData.subtotal = calculationData.price.map((price, index) => \n    price * calculationData.quantity[index]\n  );\n  \n  const calculationDF = new dfd.DataFrame(calculationData);\n\n  \n  console.log('\\n Calculation DataFrame (with subtotals):');\n  calculationDF.print();\n  \n  // Sum the columns to get totals\n  const totalCost = calculationDF.subtotal.sum();\n  const totalItems = calculationDF.quantity.sum();\n  const itemCount = shoppingList.shape[0];\n  \n  console.log('\\n📋 Summary:');\n  console.log('━'.repeat(30));\n  console.log(`Different Products: ${itemCount}`);\n  console.log(`Total Items: ${totalItems}`);\n  console.log(`Total Cost: $${totalCost.toFixed(2)}`);\n  console.log(`Average per Item: $${(totalCost / totalItems).toFixed(2)}`);\n  \n  // Export for reactive display\n  exports.totalCost = totalCost;\n  exports.totalItems = totalItems;\n  exports.itemCount = itemCount;\n  exports.averagePerItem = totalItems > 0 ? totalCost / totalItems : 0;\n  exports.calculationTimestamp = new Date().toISOString();\n  \n  console.log('\\n✅ Calculations complete and exported!');\n  \n} else {\n  console.log('❌ No shopping list available. Run the initialization cell first.');\n}"
    },
    {
      "id": "shopping-summary-cell",
      "type": "markdown",
      "content": "## 📊 Shopping List Summary\n\n### Current Totals\n{{totalCost ? '- **Different Products**: ' + itemCount + ' types\\n- **Total Items**: ' + totalItems + ' pieces\\n- **Total Cost**: $' + totalCost.toFixed(2) + '\\n- **Average per Item**: $' + averagePerItem.toFixed(2) + '\\n\\n*Last calculated: ' + new Date(calculationTimestamp).toLocaleString() + '*' : '*Run the calculation cell above to see totals*'}}\n\n### Quick Actions\n- Edit the shopping list in the first cell's output table\n- Re-run calculations to update totals\n- Save/load using storage management below"
    },
    {
      "id": "storage-management-cell",
      "type": "code",
      "code": "// Storage Management - Save/Load Shopping List\nconsole.log('=== Storage Management ===');\n\n// Save current shopping list to storage\nif (shoppingList) {\n  console.log('💾 Saving shopping list to storage...');\n  \n  // Convert DataFrame to JSON for storage\n  const listData = {\n    item: shoppingList.loc({columns: ['item']}).values.flat(),\n    price: shoppingList.loc({columns: ['price']}).values.flat(),\n    quantity: shoppingList.loc({columns: ['quantity']}).values.flat(),\n    savedAt: new Date().toISOString()\n  };\n  \n  storage.set('shopping_list', listData);\n  storage.set('shopping_list_updated', new Date().toISOString());\n  console.log('✅ Shopping list saved to storage!');\n  console.log(`� Saved ${listData.item.length} items at ${new Date(listData.savedAt).toLocaleString()}`);\n  \n} else {\n  console.log('⚠️ No shopping list to save');\n}\n\n// Show storage status\nconsole.log('\\n📦 Current Storage Contents:');\nconsole.log('━'.repeat(30));\nconst keys = storage.keys();\nif (keys.length > 0) {\n  keys.forEach(key => {\n    const value = storage.get(key);\n    if (key === 'shopping_list' && value) {\n      console.log(`${key}: ${value.item?.length || 0} items (saved: ${new Date(value.savedAt).toLocaleString()})`);\n    } else {\n      console.log(`${key}: ${typeof value} (${JSON.stringify(value).slice(0, 50)}...)`);\n    }\n  });\n} else {\n  console.log('(empty)');\n}\n\nconsole.log('\\n� To load from storage, run: `const saved = storage.get(\\'shopping_list\\');`');"
    },
    {
      "id": "usage-instructions-cell",
      "type": "markdown",
      "content": "## How to Use This Shopping List\n\n### 🚀 **Getting Started**\n1. **Run the first cell** to initialize your shopping list\n2. **Run the second cell** to calculate totals\n3. **Run the third cell** to save to storage\n\n### ✏️ **Modifying Your List**\nTo add items programmatically, run this in any code cell:\n```javascript\n// Add a new item\naddItem('Bananas', 2.50, 8);\n\n// Then recalculate (run cells 2-3 again)\n```\n\n### 💾 **Storage Features**\n- **Automatic Persistence**: Your list is saved to the notebook file\n- **Version Control**: Each save increments the version number\n- **Reload Safety**: Close and reopen the notebook - your data persists!\n\n### 🔧 **Management Tools**\n- **View Storage**: Check `storage.keys()` to see all stored data\n- **Clear All**: Use `clearStorage()` to reset everything\n- **Manual Save**: The storage is updated every time you run the save cell\n\n### 🎯 **Testing the Storage System**\n1. **Add some items** using the cells above\n2. **Save the notebook** (Cmd+S or Ctrl+S)\n3. **Close and reopen** the notebook\n4. **Run the first cell again** - your items should still be there!\n\n---\n\n**Current Status**: {{storage.has('shopping_list') ? '✅ Data Saved (' + storage.get('shopping_list').item.length + ' items)' : '⚠️ No Data Saved'}}\n\n**Last Updated**: {{storage.get('shopping_list_updated') || 'Never'}}"
    }
  ],
  "storage": {}
}
{
  "id": "shopping-list-demo",
  "title": "Shopping List with Storage Demo",
  "description": "Interactive shopping list demonstrating the storage system with DataFrames",
  "cells": [
    {
      "id": "intro-cell",
      "type": "markdown",
      "content": "# Shopping List with Storage Demo\n\n**Storage Status**: {{storage.has('shopping_list') ? 'Saved (' + storage.get('shopping_list').item.length + ' items)' : 'No data saved'}}\n**Last Updated**: {{storage.get('shopping_list_updated') || 'Never'}}"
    },
    {
      "id": "load-shopping-list-cell",
      "type": "code",
      "code": "// Load or create Shopping List DataFrame\nconst dfd = require('danfojs');\n\n// Try to load existing data from storage first\nlet shoppingData;\nif (storage.has('shopping_list')) {\n  const storedData = storage.get('shopping_list');\n  shoppingData = {\n    item: storedData.item,\n    price: storedData.price,\n    quantity: storedData.quantity\n  };\n} else {\n  // Create initial shopping list with sample data\n  shoppingData = {\n    item: ['Apples', 'Bread', 'Milk', 'Eggs'],\n    price: [3.50, 2.25, 4.80, 5.20],\n    quantity: [6, 1, 2, 12]\n  };\n}\n\n// Create base shopping list DataFrame\nexports.shoppingList = new dfd.DataFrame(shoppingData);\n\n// Output the DataFrame for editing\noutput(exports.shoppingList);"
    },
    {
      "id": "calculate-totals-cell",
      "type": "code",
      "code": "// Create calculation DataFrame with subtotal column\nexports.calculationDF = shoppingList.addColumn('subtotal', shoppingList['price'].mul(shoppingList['quantity']), { inplace: false });\n\n// Calculate totals\nexports.totalCost = exports.calculationDF['subtotal'].sum();\nexports.totalItems = exports.calculationDF['quantity'].sum();\nexports.itemCount = exports.calculationDF.shape[0];\nexports.averagePerItem = exports.totalItems > 0 ? exports.totalCost / exports.totalItems : 0;\n\n// Output the calculation DataFrame\noutput(exports.calculationDF);"
    },
    {
      "id": "shopping-summary-cell",
      "type": "markdown",
      "content": "## Shopping List Summary\n\n**Different Products**: {{itemCount}}\n**Total Items**: {{totalItems}}\n**Total Cost**: ${{totalCost ? totalCost.toFixed(2) : '0.00'}}\n**Average per Item**: ${{averagePerItem ? averagePerItem.toFixed(2) : '0.00'}}"
    },
    {
      "id": "save-to-storage-cell",
      "type": "code",
      "code": "// Save shoppingList DataFrame to storage\nif (shoppingList) {\n  // Convert DataFrame to JSON for storage\n  const listData = {\n    item: shoppingList.loc({columns: ['item']}).values.flat(),\n    price: shoppingList.loc({columns: ['price']}).values.flat(),\n    quantity: shoppingList.loc({columns: ['quantity']}).values.flat(),\n    savedAt: new Date().toISOString()\n  };\n  \n  storage.set('shopping_list', listData);\n  storage.set('shopping_list_updated', new Date().toISOString());\n  \n  console.log('Shopping list saved:', listData.item.length, 'items');\n} else {\n  console.log('No shopping list to save');\n}"
    }
  ],
  "storage": {
    "shopping_list": {
      "item": [
        "Apples",
        "Bread",
        "Milk",
        "Eggs",
        "Car"
      ],
      "price": [
        3.5,
        2.25,
        4.8,
        5.2,
        25000
      ],
      "quantity": [
        6,
        3,
        2,
        12,
        1
      ],
      "savedAt": "2025-06-15T19:01:30.789Z"
    },
    "shopping_list_updated": "2025-06-15T19:01:30.790Z"
  }
}
{
  "cells": [
    {
      "type": "markdown",
      "id": "md_intro",
      "content": "# Shell Integration Test\n\nTesting zx integration and working directory handling in NotebookJS."
    },
    {
      "type": "code",
      "id": "code_debug_working_dir",
      "code": "// Debug: Check working directory setup\nconsole.log('=== Working Directory Debug ===');\nconsole.log('process.cwd():', process.cwd());\nconsole.log('__dirname:', __dirname);\nconsole.log('Are they the same?', process.cwd() === __dirname);\n\n// Check if we're in the notebook directory (should contain package.json)\n// Note: fs and path are available as globals, no require() needed\nconst packageJsonPath = path.join(process.cwd(), 'package.json');\nconsole.log('package.json exists in cwd:', fs.existsSync(packageJsonPath));\n\n// List some files in current directory\ntry {\n    const files = fs.readdirSync(process.cwd());\n    const relevantFiles = files.filter(f => f.endsWith('.nbjs') || f.endsWith('.json') || f.endsWith('.md')).slice(0, 10);\n    console.log('Sample files in cwd:', relevantFiles);\n} catch (error) {\n    console.error('Error reading directory:', error.message);\n}\n\nexports.debugInfo = {\n    cwd: process.cwd(),\n    dirname: __dirname,\n    packageJsonExists: fs.existsSync(packageJsonPath)\n};"
    },
    {
      "type": "code",
      "id": "code_test_basics",
      "code": "// Test 1: Basic zx functionality\nconsole.log('Testing zx globals...');\nconsole.log('$ function available:', typeof $ === 'function');\nconsole.log('cd function available:', typeof cd === 'function');\nconsole.log('echo function available:', typeof echo === 'function');\nconsole.log('chalk available:', typeof chalk === 'object');\n\n// Test current working directory\nconsole.log('Current working directory:', process.cwd());\nconsole.log('__dirname value:', __dirname);\n\nexports.zxGlobalsTest = 'completed';"
    },
    {
      "type": "code",
      "id": "code_test_shell",
      "code": "// Test 2: Execute shell commands\nconsole.log('Testing shell command execution...');\n\ntry {\n    // Simple echo command\n    const result = await $`echo \"Hello from zx!\"`;\n    console.log('Echo result:', result.stdout.trim());\n    \n    // List current directory\n    const lsResult = await $`ls -la`;\n    console.log('Directory listing:');\n    console.log(lsResult.stdout);\n    \n    exports.shellCommandsTest = 'success';\n} catch (error) {\n    console.error('Shell command failed:', error.message);\n    exports.shellCommandsTest = 'failed';\n}"
    },
    {
      "type": "code",
      "id": "code_test_working_dir",
      "code": "// Test 3: Working directory behavior\nconsole.log('Testing working directory behavior...');\n\ntry {\n    // Show current directory\n    const pwdResult = await $`pwd`;\n    console.log('Current directory (pwd):', pwdResult.stdout.trim());\n    \n    // List files in current directory\n    const filesResult = await $`ls -1`;\n    const files = filesResult.stdout.trim().split('\\n').filter(f => f.length > 0);\n    console.log('Files in current directory:', files.length);\n    console.log('Sample files:', files.slice(0, 5));\n    \n    // Test that we can access notebook files\n    const notebookFiles = files.filter(f => f.endsWith('.nbjs') || f.endsWith('.md'));\n    console.log('Notebook-related files found:', notebookFiles);\n    \n    exports.workingDirTest = {\n        currentDir: pwdResult.stdout.trim(),\n        fileCount: files.length,\n        notebookFiles: notebookFiles\n    };\n} catch (error) {\n    console.error('Working directory test failed:', error.message);\n    exports.workingDirTest = 'failed';\n}"
    },
    {
      "type": "code",
      "id": "code_test_fs_operations",
      "code": "// Test 4: File system operations with Node.js fs module\nconsole.log('Testing Node.js fs operations in notebook directory...');\n\ntry {\n    // Note: fs and path are available as globals, no require() needed\n    \n    // Read current directory\n    const files = fs.readdirSync('.');\n    console.log('Files via fs.readdirSync:', files.filter(f => f.endsWith('.nbjs') || f.endsWith('.md')));\n    \n    // Test path resolution\n    const currentDir = process.cwd();\n    const testFile = path.join(currentDir, 'package.json');\n    const packageExists = fs.existsSync(testFile);\n    console.log('package.json exists in current directory:', packageExists);\n    \n    // Test __dirname\n    console.log('__dirname points to:', __dirname);\n    console.log('process.cwd() returns:', currentDir);\n    console.log('Are they the same?', __dirname === currentDir);\n    \n    exports.fsOperationsTest = {\n        filesFound: files.length,\n        packageJsonExists: packageExists,\n        currentDir: currentDir,\n        dirname: __dirname,\n        pathsMatch: __dirname === currentDir\n    };\n} catch (error) {\n    console.error('FS operations test failed:', error.message);\n    exports.fsOperationsTest = 'failed';\n}"
    },
    {
      "type": "markdown",
      "id": "md_summary",
      "content": "## Test Results\n\n- **zx Globals Test**: {{zxGlobalsTest}}\n- **Shell Commands Test**: {{shellCommandsTest}}\n- **Working Directory Test**: {{workingDirTest}}\n- **FS Operations Test**: {{fsOperationsTest}}\n\nThe integration should provide:\n1. All zx globals available (`$`, `cd`, `echo`, `chalk`, etc.)\n2. Shell commands executed in notebook directory\n3. Working directory set to notebook folder\n4. File operations scoped to notebook directory"
    }
  ]
}

{
  "cells": [
    {
      "id": "md_01",
      "type": "markdown",
      "content": "# Simple Async Reactivity Test\n\n## Quick Test Setup\n\nThis is a simplified test to verify async reactivity:\n\n1. **Slider Input** → triggers async calculation\n2. **Async Code** → performs delayed computation  \n3. **Display Code** → shows async result\n\n**Test**: Move the slider and verify all cells update correctly."
    },
    {
      "id": "var_01",
      "type": "input",
      "variableName": "testValue",
      "inputType": "range",
      "value": 5,
      "min": 1,
      "max": 10,
      "step": 1,
      "label": "Test Value"
    },
    {
      "id": "code_01",
      "type": "code",
      "code": "// ASYNC CALCULATION - should re-run when testValue changes\nconsole.log(`🔄 Async calculation starting with testValue = ${testValue}`);\n\n// Simulate async work (e.g., API call, model training)\nconst delay = 300; // Fixed delay for consistent testing\nconst result = await new Promise(resolve => {\n    setTimeout(() => {\n        const computed = testValue * testValue + Math.random() * 10;\n        console.log(`⚡ Async completed: ${testValue}² + random = ${computed.toFixed(2)}`);\n        resolve({\n            input: testValue,\n            computed: computed,\n            timestamp: Date.now()\n        });\n    }, delay);\n});\n\n// Export for next cell\nexports.asyncResult = result;\nconsole.log(`✅ Async result exported`);"
    },
    {
      "id": "code_02", 
      "type": "code",
      "code": "// DEPENDENT CALCULATION - should re-run when asyncResult changes\nconsole.log(`🔗 Using async result: ${asyncResult.computed.toFixed(2)} (from input ${asyncResult.input})`);\n\n// Calculate dependent values\nconst analysis = {\n    original: asyncResult.input,\n    computed: asyncResult.computed,\n    doubled: asyncResult.computed * 2,\n    category: asyncResult.computed > 50 ? 'High' : 'Low',\n    processingDelay: Date.now() - asyncResult.timestamp\n};\n\nconsole.log(`📊 Analysis: ${analysis.original} → ${analysis.computed.toFixed(2)} → ${analysis.doubled.toFixed(2)} (${analysis.category})`);\nconsole.log(`⏱️  Processing delay: ${analysis.processingDelay}ms`);\n\n// Visual output\nconst display = `\n<div style=\"\n    background: linear-gradient(45deg, #667eea 0%, #764ba2 100%);\n    color: white;\n    padding: 20px;\n    border-radius: 10px;\n    margin: 10px 0;\n    font-family: monospace;\n\">\n    <h3>📊 Async Reactivity Result</h3>\n    <p><strong>Input:</strong> ${analysis.original}</p>\n    <p><strong>Async Computed:</strong> ${analysis.computed.toFixed(2)}</p>\n    <p><strong>Doubled:</strong> ${analysis.doubled.toFixed(2)}</p>\n    <p><strong>Category:</strong> ${analysis.category}</p>\n    <p><strong>Chain Working:</strong> ${analysis.processingDelay < 100 ? '✅ YES' : '❌ SLOW'}</p>\n    <small>Move the slider above to test reactivity!</small>\n</div>\n`;\n\noutput(display);\nexports.analysis = analysis;"
    },
    {
      "id": "md_02",
      "type": "markdown", 
      "content": "## Testing Checklist\n\n### ✅ What to Test\n\n1. **Move the slider** from 1 to 10\n2. **Watch console output** - should see:\n   - 🔄 \"Async calculation starting...\"\n   - ⚡ \"Async completed..\" (after ~300ms)\n   - 🔗 \"Using async result...\"\n   - 📊 \"Analysis...\"\n\n3. **Check the display box** updates with new values\n4. **Verify timing** - processing delay should be < 100ms\n5. **Try rapid changes** - move slider quickly\n\n### ✅ Success Indicators\n\n- **Input Change**: Slider triggers async code immediately\n- **Async Completion**: After 300ms, dependent code runs automatically  \n- **Correct Values**: Display always shows current slider value results\n- **Fast Chain**: Processing delay < 100ms (good reactivity)\n- **No Stale Data**: Results always match current slider position\n\n### ❌ Failure Indicators\n\n- Slider changes don't trigger async code\n- Async code runs but dependent code doesn't update\n- Display shows stale/incorrect values\n- Long processing delays (> 500ms)\n- Console errors or missing output\n\n---\n\n**Current Analysis**: {{analysis?.category || 'Move slider to test'}} category with {{analysis?.processingDelay || 'N/A'}}ms delay"
    }
  ]
}

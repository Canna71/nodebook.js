{
  "cells": [
    {
      "type": "markdown",
      "id": "zx-md-intro",
      "content": "# Shell Scripting with zx in Nodebook.js\n\nThis tutorial demonstrates how to use zx shell scripting features directly in Nodebook.js code cells. All zx globals (such as $, cd, echo, chalk, etc.) are available as globals—no require needed."
    },
    {
      "type": "markdown",
      "id": "zx-md-1",
      "content": "## 1. Running Your First Shell Command\n\nUse the `$` function to run shell commands. The result is an object with `stdout` and `stderr`. Always use `await` for shell commands."
    },
    {
      "type": "code",
      "id": "zx-code-1",
      "code": "// Run a simple shell command\nconst result = await $`echo 'Hello from zx!'`;\noutput(result.stdout.trim());"
    },
    {
      "type": "markdown",
      "id": "zx-md-2",
      "content": "## 2. Listing Files in the Current Directory\n\nYou can use zx to list files, just like in a shell. The working directory is the notebook's folder."
    },
    {
      "type": "code",
      "id": "zx-code-2",
      "code": "// List files in the current directory\nconst ls = await $`ls -1`;\nconst files = ls.stdout.trim().split('\\n');\noutput.table(files.map(name => ({ name })));"
    },
    {
      "type": "markdown",
      "id": "zx-md-3",
      "content": "## 3. Using zx with Variables and Loops\n\nzx lets you use JavaScript variables and logic in your shell scripts."
    },
    {
      "type": "code",
      "id": "zx-code-3",
      "code": "// Use variables in shell commands\nconst filename = 'package.json';\nconst exists = await $`test -f ${filename} && echo exists || echo missing`;\noutput({ filename, status: exists.stdout.trim() });"
    },
    {
      "type": "code",
      "id": "zx-code-4",
      "code": "// Loop over files and print their names\nconst filesList = (await $`ls -1`).stdout.trim().split('\\n');\nfor (const file of filesList) {\n  await $`echo File: ${file}`;\n}\noutput(filesList);"
    },
    {
      "type": "markdown",
      "id": "zx-md-4",
      "content": "## 4. File System Operations with zx and Node.js\n\nzx works well with Node.js modules like `fs` and `path`, which are available as globals in Nodebook.js."
    },
    {
      "type": "code",
      "id": "zx-code-5",
      "code": "// Read a file using Node.js fs\nconst pkgPath = path.join(process.cwd(), 'package.json');\nlet pkgContent = 'Not found';\nif (fs.existsSync(pkgPath)) {\n  pkgContent = fs.readFileSync(pkgPath, 'utf-8').slice(0, 200) + '...';\n}\noutput({ pkgPath, pkgContent });"
    },
    {
      "type": "markdown",
      "id": "zx-md-5",
      "content": "## 5. Capturing Output and Troubleshooting\n\n- Use `output()` for objects and text, and `output.table()` for arrays.\n- Console logs and errors appear in the global output panel (View → Toggle Output Panel).\n- If a shell command fails, zx throws an error. Use try/catch to handle errors gracefully."
    },
    {
      "type": "code",
      "id": "zx-code-6",
      "code": "// Example: Handling shell command errors\ntry {\n  await $`cat not_a_real_file.txt`;\n  output('File exists!');\n} catch (err) {\n  output({ error: err.message });\n}"
    },
    {
      "type": "code",
      "id": "code_01",
      "code": "const ps = await $`ps -A`;\noutput(ps.stdout);",
      "isStatic": true
    },
    {
      "type": "markdown",
      "id": "zx-md-6",
      "content": "## 6. More Resources\n\n- [zx documentation](https://github.com/google/zx)\n- Nodebook.js documentation: Modules and Shell Integration\n\nYou are now ready to automate tasks and run shell scripts in Nodebook.js using zx!"
    }
  ]
}
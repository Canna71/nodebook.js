````xml
<VSCode.Cell language="markdown">
# Reading Mode Persistence Test

This notebook demonstrates that reading mode now persists across:
- Reactive value changes
- Notebook switching
- Undo/redo operations

## Instructions

1. Toggle to reading mode using Ctrl+R or the toolbar button
2. Notice the different icon (pencil when in reading mode)
3. Change the input value below
4. See that reading mode is preserved during recalculations
5. Try loading another notebook - reading mode should persist
</VSCode.Cell>
<VSCode.Cell language="input">
{
  "inputType": "number",
  "variableName": "testValue",
  "value": 42,
  "label": "Test Input",
  "min": 1,
  "max": 100,
  "step": 1
}
</VSCode.Cell>
<VSCode.Cell language="formula">
{
  "variableName": "doubled",
  "formula": "$testValue * 2"
}
</VSCode.Cell>
<VSCode.Cell language="code">
// This code cell will re-execute when testValue changes
// Reading mode should persist during this reactive update
exports.tripled = testValue * 3;
exports.analysis = {
  original: testValue,
  doubled: doubled,
  tripled: testValue * 3,
  timestamp: new Date().toLocaleTimeString()
};

output(analysis);
</VSCode.Cell>
<VSCode.Cell language="markdown">
## Results

- **Original**: {{testValue}}
- **Doubled**: {{doubled}}  
- **Tripled**: {{tripled}}

*Try changing the input value above and notice that reading mode persists through all reactive updates!*

## Reading Mode Features

✅ **Icons**: Different icons show current mode (book for edit, pencil for reading)
✅ **Persistence**: Mode survives reactive updates and notebook changes
✅ **Shortcuts**: Ctrl+R (Cmd+R on Mac) to toggle
✅ **Tooltips**: Clear indication of current mode and available action
</VSCode.Cell>
````

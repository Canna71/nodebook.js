{
  "cells": [
    {
      "type": "markdown",
      "id": "md_intro",
      "content": "# Module Resolution Test\n\nThis notebook tests module resolution functionality in Nodebook.js.\n\n## Test Environment Information"
    },
    {
      "type": "code",
      "id": "code_environment",
      "code": "// Check basic environment\noutput('Process platform:', process.platform);\noutput('Process version:', process.version);\noutput('Process arch:', process.arch);\noutput('Current working directory:', process.cwd());\noutput('__dirname:', __dirname);\noutput('__filename:', __filename);\n\n// Check if we're in development or production\nconst isDev = process.env.NODE_ENV === 'development';\noutput('Development mode:', isDev);\noutput('NODE_ENV:', process.env.NODE_ENV);\n\nexports.environmentInfo = {\n    platform: process.platform,\n    version: process.version,\n    cwd: process.cwd(),\n    isDev\n};"
    },
    {
      "type": "markdown",
      "id": "md_module_paths",
      "content": "## Module Resolution Paths"
    },
    {
      "type": "code",
      "id": "code_module_paths",
      "code": "// Check module resolution paths\nconst Module = require('module');\n\noutput('require.paths:', require.paths);\noutput('Module.globalPaths:', Module.globalPaths);\noutput('NODE_PATH environment variable:', process.env.NODE_PATH);\n\n// Check Module._nodeModulePaths for current directory\nconst nodeModulePaths = Module._nodeModulePaths(process.cwd());\noutput('Module._nodeModulePaths for cwd (first 10):', nodeModulePaths.slice(0, 10));\n\nexports.modulePaths = {\n    requirePaths: require.paths,\n    globalPaths: Module.globalPaths,\n    nodePath: process.env.NODE_PATH,\n    nodeModulePaths: nodeModulePaths.slice(0, 10)\n};"
    },
    {
      "type": "markdown",
      "id": "md_module_registry",
      "content": "## Module Registry Debug"
    },
    {
      "type": "code",
      "id": "code_module_registry",
      "code": "// Get module registry debug information\nconst { moduleRegistry } = require('@/Engine/ModuleRegistry');\n\nconst debugInfo = moduleRegistry.getDebugInfo();\noutput('Module Registry Debug Info:');\noutput(debugInfo);\n\nexports.moduleRegistryDebug = debugInfo;"
    },
    {
      "type": "markdown",
      "id": "md_test_modules",
      "content": "## Test Module Loading\n\nAttempting to load common modules that should be available."
    },
    {
      "type": "code",
      "id": "code_test_basic_modules",
      "code": "// Test loading basic Node.js modules\nconst basicModules = ['fs', 'path', 'os', 'crypto', 'util'];\nconst basicResults = {};\n\nfor (const moduleName of basicModules) {\n    try {\n        const module = require(moduleName);\n        basicResults[moduleName] = 'success';\n        output(`✅ ${moduleName} loaded successfully`);\n    } catch (error) {\n        basicResults[moduleName] = error.message;\n        output(`❌ ${moduleName} failed: ${error.message}`);\n    }\n}\n\nexports.basicModuleResults = basicResults;"
    },
    {
      "type": "code",
      "id": "code_test_external_modules",
      "code": "// Test loading external modules\nconst externalModules = ['lodash', 'axios', 'moment', 'uuid', 'zx'];\nconst externalResults = {};\n\nfor (const moduleName of externalModules) {\n    try {\n        const module = require(moduleName);\n        externalResults[moduleName] = {\n            status: 'success',\n            hasVersion: !!(module.version || module.VERSION),\n            type: typeof module\n        };\n        output(`✅ ${moduleName} loaded successfully`);\n        \n        // Show version if available\n        const version = module.version || module.VERSION;\n        if (version) {\n            output(`   Version: ${version}`);\n        }\n        \n    } catch (error) {\n        externalResults[moduleName] = {\n            status: 'failed',\n            error: error.message,\n            code: error.code\n        };\n        output(`❌ ${moduleName} failed: ${error.message}`);\n    }\n}\n\noutput('\\nExternal Module Results Summary:');\noutput(externalResults);\n\nexports.externalModuleResults = externalResults;"
    },
    {
      "type": "markdown",
      "id": "md_resolution_test",
      "content": "## Module Resolution Test\n\nTesting the actual module resolution process."
    },
    {
      "type": "code",
      "id": "code_resolution_test",
      "code": "// Test module resolution directly\nconst Module = require('module');\nconst testModules = ['lodash', 'axios', 'moment'];\nconst resolutionResults = {};\n\nfor (const moduleName of testModules) {\n    try {\n        // Try to resolve the module path\n        const resolved = Module._resolveFilename(moduleName, {\n            paths: Module._nodeModulePaths(process.cwd())\n        });\n        \n        resolutionResults[moduleName] = {\n            status: 'resolved',\n            path: resolved\n        };\n        \n        output(`✅ ${moduleName} resolves to: ${resolved}`);\n        \n    } catch (error) {\n        resolutionResults[moduleName] = {\n            status: 'failed',\n            error: error.message,\n            code: error.code\n        };\n        \n        output(`❌ ${moduleName} resolution failed: ${error.message}`);\n    }\n}\n\nexports.resolutionResults = resolutionResults;"
    }
  ]
}

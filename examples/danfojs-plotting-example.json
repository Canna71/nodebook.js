{
  "id": "danfojs-plotting-showcase",
  "name": "Danfo.js Plotting Showcase",
  "description": "Comprehensive example demonstrating DOM output capabilities with both outEl container and output() function",
  "reactiveValues": [],
  "formulas": [],
  "cells": [
    {
      "id": "setup-danfojs",
      "type": "code",
      "code": "// Import Danfo.js library\nconst dfd = require('danfojs-node');\n\n// Create sample sales data\nconst salesData = {\n  month: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  revenue: [45000, 52000, 48000, 61000, 55000, 67000, 73000, 69000, 58000, 62000, 71000, 78000],\n  costs: [32000, 38000, 35000, 42000, 39000, 47000, 51000, 48000, 41000, 44000, 50000, 54000],\n  customers: [450, 520, 480, 610, 550, 670, 730, 690, 580, 620, 710, 780]\n};\n\n// Export the DataFrame and data for other cells to use\nexports.df = new dfd.DataFrame(salesData);\nexports.salesData = salesData; // Export raw data object\nconsole.log('Sales DataFrame created:');\nconsole.log(exports.df);\n\n// Calculate profit and profit margin (immutable operations)\nexports.salesDataFrame = exports.df\n  .addColumn('profit', exports.df['revenue'].sub(exports.df['costs']), { inplace: false })\n  .addColumn('profit_margin', exports.df['revenue'].sub(exports.df['costs']).div(exports.df['revenue']).mul(100), { inplace: false });\n\nconsole.log('\\nDataFrame with calculated fields:');\nconsole.log(exports.salesDataFrame);"
    },
    {
      "id": "dom-output-demo",
      "type": "code",
      "code": "// Demonstrate both DOM output approaches\n\n// Method 1: Create DOM element and use output()\nconst createChart1 = () => {\n  const container = document.createElement('div');\n  container.style.cssText = 'padding: 20px; border: 2px solid #4CAF50; margin: 10px 0; background: #f9f9f9; border-radius: 8px;';\n  \n  const title = document.createElement('h3');\n  title.textContent = 'Method 1: output(domElement)';\n  title.style.cssText = 'margin: 0 0 15px 0; color: #2E7D32; font-family: Arial, sans-serif;';\n  \n  const chart = document.createElement('div');\n  chart.style.cssText = 'display: flex; gap: 10px; flex-wrap: wrap;';\n  \n  // Create simple bar chart using divs\n  const months = salesDataFrame['month'].values;\n  const revenue = salesDataFrame['revenue'].values;\n  const maxRevenue = Math.max(...revenue);\n  \n  months.forEach((month, i) => {\n    const bar = document.createElement('div');\n    const height = (revenue[i] / maxRevenue) * 100;\n    bar.style.cssText = `\n      width: 40px;\n      height: ${height}px;\n      background: linear-gradient(to top, #4CAF50, #8BC34A);\n      margin: 0 2px;\n      display: flex;\n      flex-direction: column;\n      justify-content: flex-end;\n      align-items: center;\n      border-radius: 4px 4px 0 0;\n      position: relative;\n    `;\n    \n    const label = document.createElement('div');\n    label.textContent = month;\n    label.style.cssText = 'font-size: 10px; margin-top: 5px; color: #333;';\n    \n    const value = document.createElement('div');\n    value.textContent = `$${(revenue[i]/1000).toFixed(0)}k`;\n    value.style.cssText = 'font-size: 8px; color: white; position: absolute; top: 2px;';\n    \n    bar.appendChild(value);\n    chart.appendChild(bar);\n    chart.appendChild(label);\n  });\n  \n  container.appendChild(title);\n  container.appendChild(chart);\n  return container;\n};\n\n// Output the DOM element using output()\noutput(createChart1());\n\nconsole.log('Chart 1 created using output() method');"
    },
    {
      "id": "direct-dom-demo",
      "type": "code",
      "code": "// Method 2: Render directly to outEl container\nif (outEl) {\n  // Create title\n  const title = document.createElement('h3');\n  title.textContent = 'Method 2: Direct to outEl';\n  title.style.cssText = 'margin: 20px 0 15px 0; color: #1976D2; font-family: Arial, sans-serif;';\n  outEl.appendChild(title);\n  \n  // Create profit margin chart\n  const chartContainer = document.createElement('div');\n  chartContainer.style.cssText = 'padding: 20px; border: 2px solid #2196F3; background: #f0f8ff; border-radius: 8px; margin-bottom: 10px;';\n  \n  const chartTitle = document.createElement('h4');\n  chartTitle.textContent = 'Monthly Profit Margin (%)';\n  chartTitle.style.cssText = 'margin: 0 0 15px 0; color: #1565C0;';\n  chartContainer.appendChild(chartTitle);\n  \n  // Create line chart for profit margin\n  const lineChart = document.createElement('div');\n  lineChart.style.cssText = 'position: relative; height: 120px; border-bottom: 2px solid #ccc; border-left: 2px solid #ccc; margin: 10px;';\n  \n  const months = salesDataFrame['month'].values;\n  const profitMargins = salesDataFrame['profit_margin'].values;\n  const maxMargin = Math.max(...profitMargins);\n  const minMargin = Math.min(...profitMargins);\n  const range = maxMargin - minMargin;\n  \n  // Create SVG for smooth line\n  const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n  svg.style.cssText = 'position: absolute; top: 0; left: 0; width: 100%; height: 100%;';\n  svg.setAttribute('viewBox', '0 0 360 120');\n  \n  let pathData = '';\n  profitMargins.forEach((margin, i) => {\n    const x = (i / (profitMargins.length - 1)) * 340 + 10;\n    const y = 110 - ((margin - minMargin) / range) * 100;\n    pathData += i === 0 ? `M ${x} ${y}` : ` L ${x} ${y}`;\n    \n    // Add data points\n    const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n    circle.setAttribute('cx', x.toString());\n    circle.setAttribute('cy', y.toString());\n    circle.setAttribute('r', '3');\n    circle.setAttribute('fill', '#FF5722');\n    svg.appendChild(circle);\n    \n    // Add value labels\n    const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n    text.setAttribute('x', x.toString());\n    text.setAttribute('y', (y - 8).toString());\n    text.setAttribute('text-anchor', 'middle');\n    text.setAttribute('font-size', '8');\n    text.setAttribute('fill', '#333');\n    text.textContent = margin.toFixed(1) + '%';\n    svg.appendChild(text);\n  });\n  \n  // Add the path\n  const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n  path.setAttribute('d', pathData);\n  path.setAttribute('stroke', '#FF5722');\n  path.setAttribute('stroke-width', '2');\n  path.setAttribute('fill', 'none');\n  svg.appendChild(path);\n  \n  lineChart.appendChild(svg);\n  chartContainer.appendChild(lineChart);\n  \n  // Add month labels\n  const labelsContainer = document.createElement('div');\n  labelsContainer.style.cssText = 'display: flex; justify-content: space-between; margin-top: 5px; padding: 0 10px;';\n  months.forEach(month => {\n    const label = document.createElement('span');\n    label.textContent = month;\n    label.style.cssText = 'font-size: 10px; color: #666;';\n    labelsContainer.appendChild(label);\n  });\n  chartContainer.appendChild(labelsContainer);\n  \n  outEl.appendChild(chartContainer);\n  \n  console.log('Chart 2 created using direct outEl method');\n} else {\n  console.log('outEl container not available');\n}"
    },
    {
      "id": "interactive-table",
      "type": "code",
      "code": "// Create an interactive data table using both methods\n\n// Method 1: Create table and output it\nconst createInteractiveTable = () => {\n  const container = document.createElement('div');\n  container.style.cssText = 'margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 8px; background: white;';\n  \n  const title = document.createElement('h3');\n  title.textContent = 'Interactive Sales Data Table';\n  title.style.cssText = 'margin: 0 0 15px 0; color: #333;';\n  container.appendChild(title);\n  \n  const table = document.createElement('table');\n  table.style.cssText = 'width: 100%; border-collapse: collapse; font-family: Arial, sans-serif;';\n  \n  // Create header\n  const header = document.createElement('tr');\n  ['Month', 'Revenue', 'Costs', 'Profit', 'Margin %'].forEach(text => {\n    const th = document.createElement('th');\n    th.textContent = text;\n    th.style.cssText = 'padding: 10px; border: 1px solid #ddd; background: #f5f5f5; text-align: left;';\n    header.appendChild(th);\n  });\n  table.appendChild(header);\n  \n  // Get data from exported DataFrame - use dependency on salesDataFrame\n  const months = salesDataFrame['month'].values;\n  const revenue = salesDataFrame['revenue'].values;\n  const costs = salesDataFrame['costs'].values;\n  const profit = salesDataFrame['profit'].values;\n  const margins = salesDataFrame['profit_margin'].values;\n  \n  months.forEach((month, i) => {\n    const row = document.createElement('tr');\n    row.style.cssText = 'cursor: pointer; transition: background-color 0.2s;';\n    row.onmouseover = () => row.style.backgroundColor = '#f0f0f0';\n    row.onmouseout = () => row.style.backgroundColor = 'white';\n    \n    [month, `$${revenue[i].toLocaleString()}`, `$${costs[i].toLocaleString()}`, \n     `$${profit[i].toLocaleString()}`, `${margins[i].toFixed(1)}%`].forEach(text => {\n      const td = document.createElement('td');\n      td.textContent = text;\n      td.style.cssText = 'padding: 8px 10px; border: 1px solid #ddd;';\n      row.appendChild(td);\n    });\n    \n    table.appendChild(row);\n  });\n  \n  container.appendChild(table);\n  return container;\n};\n\noutput(createInteractiveTable());\n\n// Method 2: Add summary statistics directly to outEl\nif (outEl) {\n  const summaryDiv = document.createElement('div');\n  summaryDiv.style.cssText = 'margin: 20px 0; padding: 15px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 8px;';\n  \n  const summaryTitle = document.createElement('h3');\n  summaryTitle.textContent = 'Summary Statistics';\n  summaryTitle.style.cssText = 'margin: 0 0 15px 0; color: white;';\n  summaryDiv.appendChild(summaryTitle);\n  \n  // Use dependency on salesDataFrame\n  const months = salesDataFrame['month'].values;\n  \n  const stats = {\n    'Total Revenue': `$${salesDataFrame['revenue'].sum().toLocaleString()}`,\n    'Total Costs': `$${salesDataFrame['costs'].sum().toLocaleString()}`,\n    'Total Profit': `$${salesDataFrame['profit'].sum().toLocaleString()}`,\n    'Avg Profit Margin': `${salesDataFrame['profit_margin'].mean().toFixed(1)}%`,\n    'Best Month': months[salesDataFrame['revenue'].argMax()],\n    'Worst Month': months[salesDataFrame['revenue'].argMin()]\n  };\n  \n  const statsGrid = document.createElement('div');\n  statsGrid.style.cssText = 'display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px;';\n  \n  Object.entries(stats).forEach(([key, value]) => {\n    const statBox = document.createElement('div');\n    statBox.style.cssText = 'background: rgba(255,255,255,0.1); padding: 10px; border-radius: 4px; text-align: center;';\n    \n    const label = document.createElement('div');\n    label.textContent = key;\n    label.style.cssText = 'font-size: 12px; opacity: 0.8; margin-bottom: 5px;';\n    \n    const valueEl = document.createElement('div');\n    valueEl.textContent = value;\n    valueEl.style.cssText = 'font-size: 18px; font-weight: bold;';\n    \n    statBox.appendChild(label);\n    statBox.appendChild(valueEl);\n    statsGrid.appendChild(statBox);\n  });\n  \n  summaryDiv.appendChild(statsGrid);\n  outEl.appendChild(summaryDiv);\n}\n\nconsole.log('Interactive components created successfully!');"
    },
    {
      "id": "combined-output",
      "type": "code",
      "code": "// Demonstrate combined output: both regular output() and DOM elements\n\n// Regular data output\noutput({\n  summary: 'Financial Analysis Complete',\n  totalRevenue: salesDataFrame['revenue'].sum(),\n  totalProfit: salesDataFrame['profit'].sum(),\n  profitMarginRange: {\n    min: salesDataFrame['profit_margin'].min(),\n    max: salesDataFrame['profit_margin'].max()\n  },\n  topPerformers: {\n    bestRevenueMonth: salesDataFrame['month'].values[salesDataFrame['revenue'].argMax()],\n    bestMarginMonth: salesDataFrame['month'].values[salesDataFrame['profit_margin'].argMax()]\n  }\n});\n\n// Create a final visual summary\nconst finalSummary = document.createElement('div');\nfinalSummary.style.cssText = `\n  margin: 20px 0;\n  padding: 20px;\n  background: linear-gradient(45deg, #FF9800, #FF5722);\n  color: white;\n  border-radius: 12px;\n  text-align: center;\n  box-shadow: 0 4px 15px rgba(0,0,0,0.2);\n`;\n\nfinalSummary.innerHTML = `\n  <h2 style=\"margin: 0 0 15px 0; font-size: 24px;\">🎉 DOM Output Demo Complete!</h2>\n  <p style=\"margin: 0 0 10px 0; font-size: 16px;\">Both output() and outEl methods working perfectly!</p>\n  <div style=\"display: flex; justify-content: space-around; margin-top: 15px;\">\n    <div>\n      <div style=\"font-size: 14px; opacity: 0.9;\">Method 1</div>\n      <div style=\"font-size: 18px; font-weight: bold;\">output(element)</div>\n    </div>\n    <div style=\"font-size: 30px;\">+</div>\n    <div>\n      <div style=\"font-size: 14px; opacity: 0.9;\">Method 2</div>\n      <div style=\"font-size: 18px; font-weight: bold;\">outEl.appendChild()</div>\n    </div>\n  </div>\n`;\n\noutput(finalSummary);\n\nconsole.log('✅ All DOM output methods demonstrated successfully!');"
    }
  ]
}

{
  "id": "danfojs-plotting-showcase",
  "name": "Danfo.js Plotting Showcase",
  "description": "Comprehensive example demonstrating DOM output capabilities with both outEl container and output() function",
  "reactiveValues": [],
  "formulas": [],
  "cells": [
    {
      "id": "setup-danfojs",
      "type": "code",
      "code": "// Use injected danfojs module (no require needed)\n// dfd is automatically available\n\n// Create sample sales data\nconst salesData = {\n  month: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  revenue: [45000, 52000, 48000, 61000, 55000, 67000, 73000, 69000, 58000, 62000, 71000, 78000],\n  costs: [32000, 38000, 35000, 42000, 39000, 47000, 51000, 48000, 41000, 44000, 50000, 54000],\n  customers: [450, 520, 480, 610, 550, 670, 730, 690, 580, 620, 710, 780]\n};\n\n// Export the DataFrame and data for other cells to use\nexports.df = new dfd.DataFrame(salesData);\nexports.salesData = salesData; // Export raw data object\nconsole.log('Sales DataFrame created:');\nconsole.log(exports.df);\n\n// Calculate profit and profit margin (immutable operations)\nexports.salesDataFrame = exports.df\n  .addColumn('profit', exports.df['revenue'].sub(exports.df['costs']), { inplace: false })\n  .addColumn('profit_margin', exports.df['revenue'].sub(exports.df['costs']).div(exports.df['revenue']).mul(100), { inplace: false });\n\nconsole.log('\\nDataFrame with calculated fields:');\nconsole.log(exports.salesDataFrame);"
    },
    {
      "id": "dom-output-demo",
      "type": "code",
      "code": "// Method 1: Create Danfo.js bar chart using output()\n\nconst createChart1 = () => {\n  const container = createContainer();\n  \n  const title = createTitle('ðŸ“Š Method 1: Danfo.js Bar Chart via output()');\n  container.appendChild(title);\n  \n  // Create plot container with unique ID\n  const plotDiv = createDiv({\n    style: 'width: 100%; height: 400px; margin: 10px 0;'\n  });\n  container.appendChild(plotDiv);\n  \n  // Use Danfo.js to create bar chart\n  try {\n    salesDataFrame.plot(plotDiv.id).bar({\n      x: 'month',\n      y: 'revenue',\n      config: {\n        displayModeBar: false,\n        responsive: true\n      },\n      layout: {\n        title: 'Monthly Revenue',\n        xaxis: { title: 'Month' },\n        yaxis: { title: 'Revenue ($)' },\n        showlegend: false\n      }\n    });\n    \n    console.log('âœ… Danfo.js bar chart created successfully using output()!');\n    \n  } catch (error) {\n    console.error('Error creating Danfo.js bar chart:', error);\n    plotDiv.innerHTML = `<div style=\"padding: 20px; text-align: center; color: var(--color-error);\">Error: ${error.message}</div>`;\n  }\n  \n  return container;\n};\n\n// Output the container with Danfo.js chart\noutput(createChart1());\n\nconsole.log('Bar chart created using Danfo.js plot().bar() method');"
    },
    {
      "id": "direct-dom-demo",
      "type": "code",
      "code": "// Method 2: Create Danfo.js line charts using auto-outputting containers\n\n// First chart: Profit margin line chart\nconst profitMarginContainer = createContainer();\n\nconst title = createTitle('ðŸ“ˆ Method 2: Danfo.js Line Chart via Auto-Container');\nprofitMarginContainer.appendChild(title);\n\n// Create plot container with unique ID\nconst plotDiv = createDiv({\n  style: 'width: 100%; height: 400px; margin: 10px 0;'\n});\nprofitMarginContainer.appendChild(plotDiv);\n\n// Use Danfo.js to create line chart for profit margins\ntry {\n  salesDataFrame.plot(plotDiv.id).line({\n    x: 'month',\n    y: 'profit_margin',\n    config: {\n      displayModeBar: false,\n      responsive: true\n    },\n    layout: {\n      title: 'Monthly Profit Margin (%)',\n      xaxis: { title: 'Month' },\n      yaxis: { title: 'Profit Margin (%)' },\n      showlegend: false,\n    \n    }\n  });\n  \n  console.log('âœ… Danfo.js line chart created successfully using auto-container!');\n  \n} catch (error) {\n  console.error('Error creating Danfo.js line chart:', error);\n  plotDiv.innerHTML = `<div style=\"padding: 20px; text-align: center; color: var(--color-error);\">Error: ${error.message}</div>`;\n}\n\n// Second chart: Multi-line chart showing profit vs costs\nconst profitCostsContainer = createContainer();\n\nconst secondTitle = createTitle('ðŸ’° Profit vs Costs Comparison', 4);\nprofitCostsContainer.appendChild(secondTitle);\n\nconst secondPlotDiv = createDiv({\n  style: 'width: 100%; height: 400px; margin: 10px 0;'\n});\nprofitCostsContainer.appendChild(secondPlotDiv);\n\n// Create multi-line chart\ntry {\n  salesDataFrame.plot(secondPlotDiv.id).line({\n    x: 'month',\n    y: ['profit', 'costs'],\n    config: {\n      displayModeBar: false,\n      responsive: true\n    },\n    layout: {\n      title: 'Monthly Profit vs Costs',\n      xaxis: { title: 'Month' },\n      yaxis: { title: 'Amount ($)' },\n      \n    }\n  });\n  \n  console.log('âœ… Multi-line chart created successfully!');\n  \n} catch (error) {\n  console.error('Error creating multi-line chart:', error);\n  secondPlotDiv.innerHTML = `<div style=\"padding: 20px; text-align: center; color: var(--color-error);\">Error: ${error.message}</div>`;\n}\n\nconsole.log('All charts created using Danfo.js plotting methods with auto-outputting containers');"
    }
  ]
}